{
  "address": "0x88d271CfAEB999C37E52B418f9080B4441a513fc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cooldownSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeWindow",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "distributionDuration",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emission",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AssetIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Cooldown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "DelegatedPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "UserIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATE_BY_TYPE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_REVISION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_aaveGovernance",
      "outputs": [
        {
          "internalType": "contract ITransferHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_votingSnapshots",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "blockNumber",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_votingSnapshotsCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "emissionPerSecond",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastUpdateTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "emissionPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            }
          ],
          "internalType": "struct DistributionTypes.AssetConfigInput[]",
          "name": "assetsConfigInput",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "delegateByType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateByTypeBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getDelegateeByType",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromCooldownTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToReceive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "getNextCooldownTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getPowerAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "enum IGovernancePowerDelegationToken.DelegationType",
          "name": "delegationType",
          "type": "uint8"
        }
      ],
      "name": "getPowerCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getTotalRewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerRewardsToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakersCooldowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95a62addd624452fac58faa90f7338aad428ab4008a257282cf961aaeef62b19",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x88d271CfAEB999C37E52B418f9080B4441a513fc",
    "transactionIndex": 1,
    "gasUsed": "3995951",
    "logsBloom": "0x
    "blockHash": "0xbe7c19f7d64d0aa29eb3b82dd98a75c4c693adf00d1baee0f32edfa9cdd49c7a",
    "transactionHash": "0x95a62addd624452fac58faa90f7338aad428ab4008a257282cf961aaeef62b19",
    "logs": [],
    "blockNumber": 188437,
    "cumulativeGasUsed": "4048440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33Aa8F94428C0F891dFd77DD141878aBCaEFEbe8",
    "0x33Aa8F94428C0F891dFd77DD141878aBCaEFEbe8",
    "3600",
    "1800",
    "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "3600000",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca768f67316cb6bfee509981c7ccb788",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aaveGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimRewards(address,uint256)\":{\"details\":\"Claims an `amount` of `REWARD_TOKEN` to the address `to`\",\"params\":{\"amount\":\"Amount to stake*\",\"to\":\"Address to stake for\"}},\"configureAssets((uint128,uint256,address)[])\":{\"details\":\"Configures the distribution of rewards for a list of assets\",\"params\":{\"assetsConfigInput\":\"The list of configurations to apply*\"}},\"cooldown()\":{\"details\":\"Activates the cooldown period to unstake - It can't be called if the user is not staking*\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"delegates all the powers to a specific user\",\"params\":{\"delegatee\":\"the user to which the power will be delegated*\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"delegateByType(address,uint8)\":{\"details\":\"delegates one specific power to a delegatee\",\"params\":{\"delegatee\":\"the user which delegated power has changed\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)*\"}},\"delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates power from signatory to `delegatee`\",\"params\":{\"delegatee\":\"The address to delegate votes to\",\"delegationType\":\"the type of delegation (VOTING_POWER, PROPOSITION_POWER)\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getDelegateeByType(address,uint8)\":{\"details\":\"returns the delegatee of an user\",\"params\":{\"delegator\":\"the address of the delegator*\"}},\"getNextCooldownTimestamp(uint256,uint256,address,uint256)\":{\"details\":\"Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \\\"worse\\\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0\",\"params\":{\"amountToReceive\":\"Amount\",\"fromCooldownTimestamp\":\"Cooldown timestamp of the sender\",\"toAddress\":\"Address of the recipient\",\"toBalance\":\"Current balance of the receiver\"},\"returns\":{\"_0\":\"The new cooldown timestamp*\"}},\"getPowerAtBlock(address,uint256,uint8)\":{\"details\":\"returns the delegated power of a user at a certain block\",\"params\":{\"user\":\"the user*\"}},\"getPowerCurrent(address,uint8)\":{\"details\":\"returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot\",\"params\":{\"user\":\"the user*\"}},\"getTotalRewardsBalance(address)\":{\"details\":\"Return the total rewards pending to claim by an staker\",\"params\":{\"staker\":\"The staker address\"},\"returns\":{\"_0\":\"The rewards\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize()\":{\"details\":\"Called by the proxy contract*\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\",\"params\":{\"deadline\":\"the deadline timestamp, type(uint256).max for no deadline\",\"owner\":\"the owner of the funds\",\"r\":\"signature param\",\"s\":\"signature param\",\"spender\":\"the spender\",\"v\":\"signature param\",\"value\":\"the amount\"}},\"redeem(address,uint256)\":{\"details\":\"Redeems staked tokens, and stop earning rewards\",\"params\":{\"amount\":\"Amount to redeem*\",\"to\":\"Address to redeem to\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"StakedAaveV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATE_BY_TYPE_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"REWARDS_VAULT()\":{\"notice\":\"Address to pull from the rewards, needs to have approved this contract\"},\"UNSTAKE_WINDOW()\":{\"notice\":\"Seconds available to redeem once the cooldown period is fullfilled\"}},\"notice\":\"StakedTokenV2 with AAVE token as staked token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/stake/StakedAaveV2.sol\":\"StakedAaveV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/aave-token/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x388d7e22e4455851ae9d1309dabf9e01ff6849128ef607e89389b7cf8fe4df1d\",\"license\":\"agpl-3.0\"},\"@aave/aave-token/contracts/interfaces/IGovernancePowerDelegationToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IGovernancePowerDelegationToken {\\n  \\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external virtual;\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    virtual\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    virtual\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external virtual view returns (uint256);\\n \\n  /**\\n  * @dev returns the total supply at a certain block number\\n  **/\\n  function totalSupplyAt(uint256 blockNumber) external virtual view returns (uint256);\\n}\",\"keccak256\":\"0x82d63f935980041a1fa0cd3a166d5b26695f114214a6e26c01dbd9df4c17400b\",\"license\":\"agpl-3.0\"},\"@aave/aave-token/contracts/open-zeppelin/Address.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\",\"keccak256\":\"0xc19932d20c723586b172a7f30d47b1696bd15daf0a0ebfe61519c90ab0d830ca\"},\"@aave/aave-token/contracts/open-zeppelin/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x9cb4309084f3282a5d21c242396eef9cc756180ba06e54eebfa5c447770df160\",\"license\":\"MIT\"},\"@aave/aave-token/contracts/open-zeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\",\"keccak256\":\"0x291b3f5f85cf723a515eccae8471ac99b93817d8d8f7151a5a99e13c09587e33\",\"license\":\"MIT\"},\"@aave/aave-token/contracts/open-zeppelin/SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x7cbc3384eb31fefce484ce5307dde0096f894d590d5b00b977a1a5a8682bb78f\"},\"@aave/aave-token/contracts/token/base/GovernancePowerDelegationERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {SafeMath} from '../../open-zeppelin/SafeMath.sol';\\nimport {ERC20} from '../../open-zeppelin/ERC20.sol';\\nimport {\\n  IGovernancePowerDelegationToken\\n} from '../../interfaces/IGovernancePowerDelegationToken.sol';\\n\\n/**\\n * @notice implementation of the AAVE token contract\\n * @author Aave\\n */\\nabstract contract GovernancePowerDelegationERC20 is ERC20, IGovernancePowerDelegationToken {\\n  using SafeMath for uint256;\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  /// @dev snapshot of a value on a specific block, used for votes\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  /**\\n   * @dev delegates one specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external override {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external override view returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  /**\\n   * @dev returns the total supply at a certain block number\\n   * used by the voting strategy contracts to calculate the total votes needed for threshold/quorum\\n   * In this initial implementation with no AAVE minting, simply returns the current supply\\n   * A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future\\n   **/\\n  function totalSupplyAt(uint256 blockNumber) external override view returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev moves delegated power from one user to another\\n   * @param from the user from which delegated power is moved\\n   * @param to the user that will receive the delegated power\\n   * @param amount the amount of delegated power to be moved\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(previous),\\n        uint128(previous.sub(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(from, previous.sub(amount), delegationType);\\n    }\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(previous),\\n        uint128(previous.add(amount))\\n      );\\n\\n      emit DelegatedPowerChanged(to, previous.add(amount), delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev searches a snapshot by block number. Uses binary search.\\n   * @param snapshots the snapshots mapping\\n   * @param snapshotsCounts the number of snapshots\\n   * @param user the user for which the snapshot is being searched\\n   * @param blockNumber the block number being searched\\n   **/\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev returns the delegation data (snapshot, snapshotsCount, list of delegates) by delegation type\\n   * NOTE: Ideal implementation would have mapped this in a struct by delegation type. Unfortunately,\\n   * the AAVE token and StakeToken already include a mapping for the snapshots, so we require contracts\\n   * who inherit from this to provide access to the delegation data by overriding this method.\\n   * @param delegationType the type of delegation\\n   **/\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    virtual\\n    view\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      snapshotsOwner[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the user delegatee. If a user never performed any delegation,\\n   * his delegated address will be 0x0. In that case we simply return the user itself\\n   * @param delegator the address of the user for which return the delegatee\\n   * @param delegates the array of delegates for a particular type of delegation\\n   **/\\n  function _getDelegatee(address delegator, mapping(address => address) storage delegates)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\",\"keccak256\":\"0x866ad035070a7ec3551303a27b2089b372cb4ac393c985d6896678cad8be6662\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\",\"keccak256\":\"0xb9f57138a1840eea2b01e686f7fcfc296a631ba602c9404b70752ecb8f86f8db\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x150506e2e40dc3cea841fe0ade6021b9b0d4e09f7616d312bc7c1300a2d7a94f\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\n/**\\n * @dev Interface for ERC20 including metadata\\n **/\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7c5310c66f68c2e72afcafbdaa4e2d8dce9b3bdaab553274ddf96a597ed863ef\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/IStakedAave.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x757fb8a77394148520347549d7d339f5902e4beb113db528788e2d44b0bb7289\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/ITransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1e060af926104d5750b18ab3594b65ec354c14022f35acf06cf109f2f5e91908\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x456a1aebf00cb1f2987ca41f1924e4811703f10800a34ecb759e5d1dc472bb78\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xb4df619dd013c574e0d5188bd1f52908898745703bc055e07e88f90b0fba6601\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\",\"keccak256\":\"0x8d71c65f5244916694428b5943f58d80250576666e8067eb4914aa2794f17aaa\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {Context} from './Context.sol';\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IERC20Detailed} from '../interfaces/IERC20Detailed.sol';\\nimport {SafeMath} from './SafeMath.sol';\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave\\n **/\\ncontract ERC20 is Context, IERC20, IERC20Detailed {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n  }\\n\\n  /**\\n   * @return the name of the token\\n   **/\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @return the symbol of the token\\n   **/\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @return the decimals of the token\\n   **/\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @return the total supply of the token\\n   **/\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @return the balance of the token\\n   **/\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev executes a transfer of tokens from msg.sender to recipient\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev returns the allowance of spender on the tokens owned by owner\\n   * @param owner the owner of the tokens\\n   * @param spender the user allowed to spend the owner's tokens\\n   * @return the amount of owner's tokens spender is allowed to spend\\n   **/\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev allows spender to spend the tokens owned by msg.sender\\n   * @param spender the user allowed to spend msg.sender tokens\\n   * @return true\\n   **/\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n   * @param sender the owner of the tokens\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev increases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param addedValue the amount being added to the allowance\\n   * @return true\\n   **/\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev decreases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param subtractedValue the amount being subtracted to the allowance\\n   * @return true\\n   **/\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3308bb3d8d3c5076d4db352fe8c994506ac813e45a44acb121980097f8153996\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/GovernancePowerWithSnapshot.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {ERC20} from '../lib/ERC20.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {\\n  GovernancePowerDelegationERC20\\n} from '@aave/aave-token/contracts/token/base/GovernancePowerDelegationERC20.sol';\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\nabstract contract GovernancePowerWithSnapshot is GovernancePowerDelegationERC20 {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @dev The following storage layout points to the prior StakedToken.sol implementation:\\n   * _snapshots => _votingSnapshots\\n   * _snapshotsCounts =>  _votingSnapshotsCounts\\n   * _aaveGovernance => _aaveGovernance\\n   */\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n}\\n\",\"keccak256\":\"0xac61858e050c12b7fa21543c4fc86e9fa2065f4607b74d3d2ce79b73e88e5c4c\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbba27d4b67c08f2a51ecf534aadfd510260996fcf91299691e955ee7539dd5a0\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0xf32a71745588178f5f64b96e7766589e48d5402c4679b3c04085760f9437f00b\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/AaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\",\"keccak256\":\"0x1f639ee1fe125ee2122aefd7b849b54d548b3dd7623280ae216320e98f2c6d3c\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/StakedAaveV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {StakedTokenV2} from './StakedTokenV2.sol';\\n\\n/**\\n * @title StakedAaveV2\\n * @notice StakedTokenV2 with AAVE token as staked token\\n * @author Aave\\n **/\\ncontract StakedAaveV2 is StakedTokenV2 {\\n  string internal constant NAME = 'Staked Aave';\\n  string internal constant SYMBOL = 'stkAAVE';\\n  uint8 internal constant DECIMALS = 18;\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    address governance\\n  )\\n    public\\n    StakedTokenV2(\\n      stakedToken,\\n      rewardToken,\\n      cooldownSeconds,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration,\\n      NAME,\\n      SYMBOL,\\n      DECIMALS,\\n      governance\\n    )\\n  {}\\n}\\n\",\"keccak256\":\"0xe1f5f6af72633fbaa8077952c69c18beeeecb0ed46d1700d7dc736165dc644ce\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/StakedTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from '@aave/aave-token/contracts/open-zeppelin/ERC20.sol';\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IStakedAave} from '../interfaces/IStakedAave.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\n\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\nimport {GovernancePowerWithSnapshot} from '../lib/GovernancePowerWithSnapshot.sol';\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedTokenV2 is\\n  IStakedAave,\\n  GovernancePowerWithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Start of Storage layout from StakedToken v1\\n  uint256 public constant REVISION = 2;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  /// @dev End of Storage layout from StakedToken v1\\n\\n  /// @dev To see the voting mappings, go to GovernancePowerWithSnapshot.sol\\n  mapping(address => address) internal _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) internal _propositionPowerSnapshots;\\n  mapping(address => uint256) internal _propositionPowerSnapshotsCounts;\\n  mapping(address => address) internal _propositionPowerDelegates;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals,\\n    address governance\\n  ) public ERC20(name, symbol) AaveDistributionManager(emissionManager, distributionDuration) {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n    _aaveGovernance = ITransferHook(governance);\\n    ERC20._setupDecimals(decimals);\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize() external initializer {\\n    uint256 chainId;\\n\\n    //solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(name())),\\n        keccak256(EIP712_REVISION),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n        )\\n      );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    address votingFromDelegatee = _votingDelegates[from];\\n    address votingToDelegatee = _votingDelegates[to];\\n\\n    if (votingFromDelegatee == address(0)) {\\n      votingFromDelegatee = from;\\n    }\\n    if (votingToDelegatee == address(0)) {\\n      votingToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _propositionPowerDelegates[from];\\n    address propPowerToDelegatee = _propositionPowerDelegates[to];\\n\\n    if (propPowerFromDelegatee == address(0)) {\\n      propPowerFromDelegatee = from;\\n    }\\n    if (propPowerToDelegatee == address(0)) {\\n      propPowerToDelegatee = to;\\n    }\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    view\\n    override\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, //snapshots\\n      mapping(address => uint256) storage, //snapshots count\\n      mapping(address => address) storage //delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n      );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates power from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signatory]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signatory, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signatory, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\",\"keccak256\":\"0xaaab02803560c6fc01dd578b8045abe5f32f0c2baaa7a0554561a6f783f084b6\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/utils/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xedfec4c491ad24c0a1024fc801c22f2a16d1f316f2a5cdcc883e0bbc451cffc7\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x61016060405260006009553480156200001757600080fd5b5060405162004a1e38038062004a1e8339810160408190526200003a9162000299565b878787878787876040518060400160405280600b81526020016a5374616b6564204161766560a81b8152506040518060400160405280600781526020016673746b4141564560c81b81525060128a85856001600160801b031685858160039080519060200190620000ad929190620001ed565b508051620000c3906004906020840190620001ed565b505060058054601260ff1990911617905550620000ed428262000175602090811b62001e8717901c565b60805250606090811b6001600160601b031990811660a0528c821b811660c0528b821b811660e0526101008b90526101208a90529088901b1661014052600880546001600160a01b0319166001600160a01b0383161790556200015c82620001d7602090811b62001efb17901c565b5050505050505050505050505050505050505062000365565b600082820183811015620001d0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000225576000855562000270565b82601f106200024057805160ff191683800117855562000270565b8280016001018555821562000270579182015b828111156200027057825182559160200191906001019062000253565b506200027e92915062000282565b5090565b5b808211156200027e576000815560010162000283565b600080600080600080600080610100898b031215620002b6578384fd5b8851620002c3816200034c565b60208a0151909850620002d6816200034c565b8097505060408901519550606089015194506080890151620002f8816200034c565b60a08a01519094506200030b816200034c565b60c08a01519093506001600160801b038116811462000328578283fd5b60e08a01519092506200033b816200034c565b809150509295985092959890939650565b6001600160a01b03811681146200036257600080fd5b50565b60805160a05160601c60c05160601c60e05160601c61010051610120516101405160601c6146186200040660003980610f4f52806110ff5250806108115280610ad15280611bbe5250806107b352806108395280610c2a5280611be3525080610ffc52806110c852508061090c5280610a67528061138a52508061142752806118b4525080610f2b528061389252806138d7528061390452506146186000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c8063919cd40f116101b2578063b2f4201d116100f9578063d505accf116100a2578063dde43cba1161007c578063dde43cba14610623578063f11b81881461062b578063f1cc432a1461064d578063f713d8a81461066057610336565b8063d505accf146105ea578063dc937e1c146105fd578063dd62ed3e1461061057610336565b8063c3863ada116100d3578063c3863ada146105c7578063c3cda520146105cf578063cbcbb507146105e257610336565b8063b2f4201d1461058e578063b9844d8d146105a1578063c2ffbb91146105b457610336565b8063a457c2d71161015b578063aaf5eb6811610135578063aaf5eb6814610560578063adc9772e14610568578063b2a5dbfa1461057b57610336565b8063a457c2d714610532578063a9059cbb14610545578063aa9fbe021461055857610336565b8063981b24d01161018c578063981b24d01461050457806399248ea7146105175780639a99b4f01461051f57610336565b8063919cd40f146104ec578063946776cd146104f457806395d89b41146104fc57610336565b8063395093511161028157806372b49d631161022a5780637bb73c97116102045780637bb73c97146104ab5780637e90d7ef146104be5780638129fc1c146104d15780638dbefee2146104d957610336565b806372b49d6314610493578063781603761461049b578063787a08a6146104a357610336565b80635c19a95c1161025b5780635c19a95c1461045a5780636f50458d1461046d57806370a082311461048057610336565b8063395093511461041e57806341cbf54a146104315780635b3cc0cf1461043957610336565b806330adf81f116102e35780633373ee4c116102bd5780633373ee4c146103fb578063359c4a961461040e5780633644e5151461041657610336565b806330adf81f146103c9578063312f6b83146103d1578063313ce567146103e657610336565b806318160ddd1161031457806318160ddd146103995780631e9a6950146103a157806323b872dd146103b657610336565b806306fdde031461033b578063091030c314610359578063095ea7b314610379575b600080fd5b610343610673565b60405161035091906141a8565b60405180910390f35b61036c610367366004613c82565b610727565b604051610350919061409d565b61038c610387366004613dcc565b610739565b6040516103509190614092565b61036c610757565b6103b46103af366004613dcc565b61075d565b005b61038c6103c4366004613cce565b61099f565b61036c610a41565b6103d9610a65565b604051610350919061401a565b6103ee610a89565b6040516103509190614417565b61036c610409366004613c9c565b610a92565b61036c610acf565b61036c610af3565b61038c61042c366004613dcc565b610af9565b61036c610b54565b61044c610447366004613dcc565b610b78565b6040516103509291906143c7565b6103b4610468366004613c82565b610bbf565b6103d961047b366004613d72565b610bda565b61036c61048e366004613c82565b610bfc565b61036c610c28565b610343610c4c565b6103b4610c85565b61036c6104b9366004613c82565b610cfe565b61036c6104cc366004613c82565b610d10565b6103b4610d22565b61036c6104e7366004613c82565b610e60565b61036c610f29565b6103d9610f4d565b610343610f71565b61036c610512366004613f27565b610ff0565b6103d9610ffa565b6103b461052d366004613dcc565b61101e565b61038c610540366004613dcc565b611190565b61038c610553366004613dcc565b611205565b61036c611219565b6103ee61123d565b6103b4610576366004613dcc565b611242565b6103b4610589366004613e87565b61140f565b61036c61059c366004613d72565b611631565b61036c6105af366004613c82565b611659565b61036c6105c2366004613df5565b61166b565b6103d9611694565b6103b46105dd366004613e30565b6116b0565b6103d96118b2565b6103b46105f8366004613d09565b6118d6565b6103b461060b366004613d72565b611af2565b61036c61061e366004613c9c565b611b01565b61036c611b39565b61063e610639366004613c82565b611b3e565b604051610350939291906143ea565b61036c61065b366004613f3f565b611b82565b6103b461066e366004613d9b565b611c84565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061074d610746611f2f565b8484611f33565b5060015b92915050565b60025490565b8061079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141bb565b60405180910390fd5b336000908152603e60205260409020546107d7817f0000000000000000000000000000000000000000000000000000000000000000611e87565b421161080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614229565b7f000000000000000000000000000000000000000000000000000000000000000061086461085d837f0000000000000000000000000000000000000000000000000000000000000000611e87565b429061207a565b111561089c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061433c565b60006108a733610bfc565b905060008184116108b857836108ba565b815b90506108c8338360016120bc565b506108d3338261217a565b6108dd828261207a565b6108f257336000908152603e60205260408120555b61093373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686836122c4565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d983604051610990919061409d565b60405180910390a35050505050565b60006109ac848484612351565b610a36846109b8611f2f565b610a31856040518060600160405280602881526020016144d46028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610a03611f2f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061245e565b611f33565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60435481565b600061074d610b06611f2f565b84610a318560016000610b17611f2f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490611e87565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b610bcb3382600061250f565b610bd73382600161250f565b50565b600080610be683612692565b92505050610bf484826126cc565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b610c8e33610bfc565b610cc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614373565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b60076020526000908152604090205481565b603d6020526000908152604090205481565b6000610d2c612704565b90506009548111610d88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806144fc602e913960400191505060405180910390fd5b6009819055467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610db7610673565b8051602091820120604080518082018252600181527f31000000000000000000000000000000000000000000000000000000000000009084015251610e2393927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101614151565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101206043555050565b60408051600180825281830190925260009160609190816020015b610e83613bf0565b815260200190600190039081610e7b57905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610ec885610bfc565b8152602001610ed5610757565b81525081600081518110610ee557fe5b6020026020010181905250610a3a610efd8483612709565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d602052604090205490611e87565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b6000610751610757565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006110343361102d33610bfc565b60006120bc565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83146110655782611067565b815b90506110b3816040518060400160405280600e81526020017f494e56414c49445f414d4f554e540000000000000000000000000000000000008152508461245e9092919063ffffffff16565b336000908152603d60205260409020556111257f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684612837565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051611182919061409d565b60405180910390a350505050565b600061074d61119d611f2f565b84610a31856040518060600160405280602581526020016145be60259139600160006111c7611f2f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061245e565b600061074d611212611f2f565b8484612351565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b601281565b80611279576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141bb565b600061128483610bfc565b9050600061129b843084611296610757565b6128cc565b90508015611333577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7684826040516112d492919061406c565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d602052604090205461130c9082611e87565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b6113406000848685611b82565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205561137084846129a5565b6113b273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086612837565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785604051611182919061409d565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461147e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906142ce565b60005b8181101561162c576000603c600085858581811061149b57fe5b90506060020160400160208101906114b39190613c82565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506115328484848181106114fe57fe5b90506060020160400160208101906115169190613c82565b8286868681811061152357fe5b90506060020160200135612ad6565b5083838381811061153f57fe5b6115559260206060909202019081019150613ef7565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061159d57fe5b90506060020160400160208101906115b59190613c82565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8585858181106115f857fe5b61160e9260206060909202019081019150613ef7565b60405161161b91906143aa565b60405180910390a250600101611481565b505050565b600080600061163f84612692565b509150915061165082828743612bd5565b95945050505050565b60446020526000908152604090205481565b600080600061167984612692565b509150915061168a82828888612bd5565b9695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60007f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d8787876040516020016116e994939291906140e7565b604051602081830303815290604052805190602001209050600060435482604051602001611718929190613fe4565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611755949392919061418a565b6020604051602081039080840390855afa158015611777573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166117ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614297565b8642111561188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b61189b818a600061250f565b6118a7818a600161250f565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8716611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614305565b8342111561195d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b73ffffffffffffffffffffffffffffffffffffffff871660009081526044602090815260408083205460435491519093926119c4917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918d918d918d9189918e91016140a6565b604051602081830303815290604052805190602001206040516020016119eb929190613fe4565b60405160208183030381529060405280519060200120905060018186868660405160008152602001604052604051611a26949392919061418a565b6020604051602081039080840390855afa158015611a48573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b611ac1826001611e87565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152604460205260409020556118a7898989611f33565b611afd33838361250f565b5050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600281565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e602052604081205480611bb7576000915050610bf4565b6000611c0d7f0000000000000000000000000000000000000000000000000000000000000000611c07427f000000000000000000000000000000000000000000000000000000000000000061207a565b9061207a565b905081811115611c205760009150611c7a565b6000878211611c2f5787611c31565b425b905082811015611c4657829350505050610bf4565b611c76611c538887611e87565b611c70611c608887612f22565b611c6a8b86612f22565b90611e87565b90612f95565b9250505b5095945050505050565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e588886001811115611cb457fe5b8888604051602001611cca959493929190614118565b604051602081830303815290604052805190602001209050600060435482604051602001611cf9929190613fe4565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611d36949392919061418a565b6020604051602081039080840390855afa158015611d58573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611dd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614297565b86421115611e70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b611e7b818b8b61250f565b50505050505050505050565b600082820183811015610a3a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316611f9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145706024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661200b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061446b6022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000610a3a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061245e565b6000806120cd853086611296610757565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d6020526040812054919250906121019083611e87565b905081156116505783156121385773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76868360405161216992919061406c565b60405180910390a195945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166121e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061452a6021913960400191505060405180910390fd5b6121f282600083612fd7565b61223c816040518060600160405280602281526020016144496022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902054919061245e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205560025461226f908261207a565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261162c90849061315b565b600061235c84610bfc565b905061236a848260016120bc565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461244d5760006123a984610bfc565b90506123b7848260016120bc565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e60205260409020546123ea81858785611b82565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e6020526040902055828414801561241e57508015155b1561244a5773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b612458848484613399565b50505050565b60008184841115612507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124cc5781810151838201526020016124b4565b50505050905090810190601f1680156124f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff821661259157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f44454c454741544545000000000000000000000000000000604482015290519081900360640190fd5b600061259c82612692565b9250505060006125ab85610bfc565b905060006125b986846126cc565b73ffffffffffffffffffffffffffffffffffffffff878116600090815260208690526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918816919091179055905061261a81868487613569565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd866040518082600181111561267a57fe5b815260200191505060405180910390a3505050505050565b60008080808460018111156126a357fe5b14156126b957506006915060079050603f6126c5565b50604091506041905060425b9193909250565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526020839052604081205490911680610a3a5783915050610751565b600290565b600080805b835181101561282f576000603c600086848151811061272957fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081206001810154815488519294506127b4926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a90889081106127a357fe5b602002602001015160400151613861565b905061282361281c8785815181106127c857fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613975565b8590611e87565b9350505060010161270e565b509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261245890859061315b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c602090815260408083209388168352600284019091528120549091908280612914888588612ad6565b90508083146129995786156129315761292e878285613975565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b9061299090859061409d565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612a2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612a3360008383612fd7565b600254612a409082611e87565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054612a739082611e87565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1642811415612b1757509050610a3a565b8454600090612b3b9084906fffffffffffffffffffffffffffffffff168488613861565b9050828114612b9c578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc82604051612b93919061409d565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b600043821115612c4657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020859052604090205480612c8257612c7a84610bfc565b915050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850184529091529020546fffffffffffffffffffffffffffffffff168310612d6a5773ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401835292905220546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104169050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083208380529091529020546fffffffffffffffffffffffffffffffff16831015612dbc576000915050610bf4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b81811115612ec1576002828203048103612dfa613c27565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260208a815260408083208484528252918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415612e9057602001516fffffffffffffffffffffffffffffffff169450610bf49350505050565b80516fffffffffffffffffffffffffffffffff16871115612eb357819350612eba565b6001820392505b5050612de2565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526020888152604080832093835292905220546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000090910416915050949350505050565b600082612f3157506000610751565b82820282848281612f3e57fe5b0414610a3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806144b36021913960400191505060405180910390fd5b6000610a3a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613997565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603f6020526040808220548584168352912054908216911681613015578491505b73ffffffffffffffffffffffffffffffffffffffff81166130335750825b6130408282856000613569565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526042602052604080822054878416835291205490821691168161307e578691505b73ffffffffffffffffffffffffffffffffffffffff811661309c5750845b6130a98282876001613569565b60085473ffffffffffffffffffffffffffffffffffffffff168015613151576040517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690634a3931499061311e908b908b908b9060040161403b565b600060405180830381600087803b15801561313857600080fd5b505af115801561314c573d6000803e3d6000fd5b505050505b5050505050505050565b61317a8273ffffffffffffffffffffffffffffffffffffffff16613a16565b6131e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061324e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613211565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146132b0576040519150601f19603f3d011682016040523d82523d6000602084013e6132b5565b606091505b50915091508161332657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156124585780806020019051602081101561334257600080fd5b5051612458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614594602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316613405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061454b6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613471576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806144266023913960400191505060405180910390fd5b61347c838383612fd7565b6134c68160405180606001604052806026815260200161448d6026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061245e565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546135029082611e87565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156135a257612458565b6000806135ae83612692565b50909250905073ffffffffffffffffffffffffffffffffffffffff8616156137095773ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812054801561367a5773ffffffffffffffffffffffffffffffffffffffff88166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff169150613686565b61368388610bfc565b91505b61369c84848a85613697818c61207a565b613a4f565b73ffffffffffffffffffffffffffffffffffffffff88167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f6136de848961207a565b87604051808381526020018260018111156136f557fe5b81526020019250505060405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8516156138595773ffffffffffffffffffffffffffffffffffffffff851660009081526020829052604081205480156137cf5773ffffffffffffffffffffffffffffffffffffffff87166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1691506137db565b6137d887610bfc565b91505b6137ec84848985613697818c611e87565b73ffffffffffffffffffffffffffffffffffffffff87167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f61382e8489611e87565b876040518083815260200182600181111561384557fe5b81526020019250505060405180910390a250505b505050505050565b600083158061386e575081155b8061388a575042836fffffffffffffffffffffffffffffffff16145b806138c757507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156138d3575083610bf4565b60007f000000000000000000000000000000000000000000000000000000000000000042116139025742613924565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000613944826fffffffffffffffffffffffffffffffff871661207a565b905061396a87611c6a86611c70670de0b6b3a76400006139648c88612f22565b90612f22565b979650505050505050565b6000610bf4670de0b6b3a7640000611c70613990868661207a565b8790612f22565b60008183613a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156124cc5781810151838201526020016124b4565b506000838581613a0c57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020858152604080832054918890529091204391908115801590613ad457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152602082905260409020546fffffffffffffffffffffffffffffffff8481169116145b15613b3d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055613151565b6040805180820182526fffffffffffffffffffffffffffffffff8086168252868116602080840191825260008781528682528581209451855493518516700100000000000000000000000000000000029085167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416939093179093169190911790925573ffffffffffffffffffffffffffffffffffffffff8916815290899052206001830190555050505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2357600080fd5b803560028110610c2357600080fd5b803560ff81168114610c2357600080fd5b600060208284031215613c93578081fd5b610a3a82613c3e565b60008060408385031215613cae578081fd5b613cb783613c3e565b9150613cc560208401613c3e565b90509250929050565b600080600060608486031215613ce2578081fd5b613ceb84613c3e565b9250613cf960208501613c3e565b9150604084013590509250925092565b600080600080600080600060e0888a031215613d23578283fd5b613d2c88613c3e565b9650613d3a60208901613c3e565b95506040880135945060608801359350613d5660808901613c71565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613d84578182fd5b613d8d83613c3e565b9150613cc560208401613c62565b600080600080600080600060e0888a031215613db5578283fd5b613dbe88613c3e565b9650613d3a60208901613c62565b60008060408385031215613dde578182fd5b613de783613c3e565b946020939093013593505050565b600080600060608486031215613e09578283fd5b613e1284613c3e565b925060208401359150613e2760408501613c62565b90509250925092565b60008060008060008060c08789031215613e48578182fd5b613e5187613c3e565b95506020870135945060408701359350613e6d60608801613c71565b92506080870135915060a087013590509295509295509295565b60008060208385031215613e99578182fd5b823567ffffffffffffffff80821115613eb0578384fd5b818501915085601f830112613ec3578384fd5b813581811115613ed1578485fd5b866020606083028501011115613ee5578485fd5b60209290920196919550909350505050565b600060208284031215613f08578081fd5b81356fffffffffffffffffffffffffffffffff81168114610a3a578182fd5b600060208284031215613f38578081fd5b5035919050565b60008060008060808587031215613f54578182fd5b8435935060208501359250613f6b60408601613c3e565b9396929550929360600135925050565b60008151808452815b81811015613fa057602081850181015186830182015201613f84565b81811115613fb15782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b94855273ffffffffffffffffffffffffffffffffffffffff93909316602085015260408401919091526060830152608082015260a00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610a3a6020830184613f7b565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526012908201527f494e56414c49445f45585049524154494f4e0000000000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604082015260600190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60ff9190911681526020019056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220429852e7a0def53a34ad922b7e3d08d6dddc39a9398aa3132648753531de835764736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c8063919cd40f116101b2578063b2f4201d116100f9578063d505accf116100a2578063dde43cba1161007c578063dde43cba14610623578063f11b81881461062b578063f1cc432a1461064d578063f713d8a81461066057610336565b8063d505accf146105ea578063dc937e1c146105fd578063dd62ed3e1461061057610336565b8063c3863ada116100d3578063c3863ada146105c7578063c3cda520146105cf578063cbcbb507146105e257610336565b8063b2f4201d1461058e578063b9844d8d146105a1578063c2ffbb91146105b457610336565b8063a457c2d71161015b578063aaf5eb6811610135578063aaf5eb6814610560578063adc9772e14610568578063b2a5dbfa1461057b57610336565b8063a457c2d714610532578063a9059cbb14610545578063aa9fbe021461055857610336565b8063981b24d01161018c578063981b24d01461050457806399248ea7146105175780639a99b4f01461051f57610336565b8063919cd40f146104ec578063946776cd146104f457806395d89b41146104fc57610336565b8063395093511161028157806372b49d631161022a5780637bb73c97116102045780637bb73c97146104ab5780637e90d7ef146104be5780638129fc1c146104d15780638dbefee2146104d957610336565b806372b49d6314610493578063781603761461049b578063787a08a6146104a357610336565b80635c19a95c1161025b5780635c19a95c1461045a5780636f50458d1461046d57806370a082311461048057610336565b8063395093511461041e57806341cbf54a146104315780635b3cc0cf1461043957610336565b806330adf81f116102e35780633373ee4c116102bd5780633373ee4c146103fb578063359c4a961461040e5780633644e5151461041657610336565b806330adf81f146103c9578063312f6b83146103d1578063313ce567146103e657610336565b806318160ddd1161031457806318160ddd146103995780631e9a6950146103a157806323b872dd146103b657610336565b806306fdde031461033b578063091030c314610359578063095ea7b314610379575b600080fd5b610343610673565b60405161035091906141a8565b60405180910390f35b61036c610367366004613c82565b610727565b604051610350919061409d565b61038c610387366004613dcc565b610739565b6040516103509190614092565b61036c610757565b6103b46103af366004613dcc565b61075d565b005b61038c6103c4366004613cce565b61099f565b61036c610a41565b6103d9610a65565b604051610350919061401a565b6103ee610a89565b6040516103509190614417565b61036c610409366004613c9c565b610a92565b61036c610acf565b61036c610af3565b61038c61042c366004613dcc565b610af9565b61036c610b54565b61044c610447366004613dcc565b610b78565b6040516103509291906143c7565b6103b4610468366004613c82565b610bbf565b6103d961047b366004613d72565b610bda565b61036c61048e366004613c82565b610bfc565b61036c610c28565b610343610c4c565b6103b4610c85565b61036c6104b9366004613c82565b610cfe565b61036c6104cc366004613c82565b610d10565b6103b4610d22565b61036c6104e7366004613c82565b610e60565b61036c610f29565b6103d9610f4d565b610343610f71565b61036c610512366004613f27565b610ff0565b6103d9610ffa565b6103b461052d366004613dcc565b61101e565b61038c610540366004613dcc565b611190565b61038c610553366004613dcc565b611205565b61036c611219565b6103ee61123d565b6103b4610576366004613dcc565b611242565b6103b4610589366004613e87565b61140f565b61036c61059c366004613d72565b611631565b61036c6105af366004613c82565b611659565b61036c6105c2366004613df5565b61166b565b6103d9611694565b6103b46105dd366004613e30565b6116b0565b6103d96118b2565b6103b46105f8366004613d09565b6118d6565b6103b461060b366004613d72565b611af2565b61036c61061e366004613c9c565b611b01565b61036c611b39565b61063e610639366004613c82565b611b3e565b604051610350939291906143ea565b61036c61065b366004613f3f565b611b82565b6103b461066e366004613d9b565b611c84565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061074d610746611f2f565b8484611f33565b5060015b92915050565b60025490565b8061079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141bb565b60405180910390fd5b336000908152603e60205260409020546107d7817f0000000000000000000000000000000000000000000000000000000000000000611e87565b421161080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614229565b7f000000000000000000000000000000000000000000000000000000000000000061086461085d837f0000000000000000000000000000000000000000000000000000000000000000611e87565b429061207a565b111561089c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061433c565b60006108a733610bfc565b905060008184116108b857836108ba565b815b90506108c8338360016120bc565b506108d3338261217a565b6108dd828261207a565b6108f257336000908152603e60205260408120555b61093373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686836122c4565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d983604051610990919061409d565b60405180910390a35050505050565b60006109ac848484612351565b610a36846109b8611f2f565b610a31856040518060600160405280602881526020016144d46028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610a03611f2f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919061245e565b611f33565b5060015b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60435481565b600061074d610b06611f2f565b84610a318560016000610b17611f2f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490611e87565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b610bcb3382600061250f565b610bd73382600161250f565b50565b600080610be683612692565b92505050610bf484826126cc565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b610c8e33610bfc565b610cc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614373565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b60076020526000908152604090205481565b603d6020526000908152604090205481565b6000610d2c612704565b90506009548111610d88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806144fc602e913960400191505060405180910390fd5b6009819055467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610db7610673565b8051602091820120604080518082018252600181527f31000000000000000000000000000000000000000000000000000000000000009084015251610e2393927fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6918691309101614151565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101206043555050565b60408051600180825281830190925260009160609190816020015b610e83613bf0565b815260200190600190039081610e7b57905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610ec885610bfc565b8152602001610ed5610757565b81525081600081518110610ee557fe5b6020026020010181905250610a3a610efd8483612709565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d602052604090205490611e87565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071d5780601f106106f25761010080835404028352916020019161071d565b6000610751610757565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006110343361102d33610bfc565b60006120bc565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83146110655782611067565b815b90506110b3816040518060400160405280600e81526020017f494e56414c49445f414d4f554e540000000000000000000000000000000000008152508461245e9092919063ffffffff16565b336000908152603d60205260409020556111257f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684612837565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051611182919061409d565b60405180910390a350505050565b600061074d61119d611f2f565b84610a31856040518060600160405280602581526020016145be60259139600160006111c7611f2f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919061245e565b600061074d611212611f2f565b8484612351565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b601281565b80611279576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141bb565b600061128483610bfc565b9050600061129b843084611296610757565b6128cc565b90508015611333577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7684826040516112d492919061406c565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d602052604090205461130c9082611e87565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b6113406000848685611b82565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e602052604090205561137084846129a5565b6113b273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086612837565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785604051611182919061409d565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461147e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906142ce565b60005b8181101561162c576000603c600085858581811061149b57fe5b90506060020160400160208101906114b39190613c82565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506115328484848181106114fe57fe5b90506060020160400160208101906115169190613c82565b8286868681811061152357fe5b90506060020160200135612ad6565b5083838381811061153f57fe5b6115559260206060909202019081019150613ef7565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061159d57fe5b90506060020160400160208101906115b59190613c82565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8585858181106115f857fe5b61160e9260206060909202019081019150613ef7565b60405161161b91906143aa565b60405180910390a250600101611481565b505050565b600080600061163f84612692565b509150915061165082828743612bd5565b95945050505050565b60446020526000908152604090205481565b600080600061167984612692565b509150915061168a82828888612bd5565b9695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60007f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d8787876040516020016116e994939291906140e7565b604051602081830303815290604052805190602001209050600060435482604051602001611718929190613fe4565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611755949392919061418a565b6020604051602081039080840390855afa158015611777573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166117ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614297565b8642111561188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b61189b818a600061250f565b6118a7818a600161250f565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8716611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614305565b8342111561195d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b73ffffffffffffffffffffffffffffffffffffffff871660009081526044602090815260408083205460435491519093926119c4917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918d918d918d9189918e91016140a6565b604051602081830303815290604052805190602001206040516020016119eb929190613fe4565b60405160208183030381529060405280519060200120905060018186868660405160008152602001604052604051611a26949392919061418a565b6020604051602081039080840390855afa158015611a48573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b611ac1826001611e87565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152604460205260409020556118a7898989611f33565b611afd33838361250f565b5050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600281565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e602052604081205480611bb7576000915050610bf4565b6000611c0d7f0000000000000000000000000000000000000000000000000000000000000000611c07427f000000000000000000000000000000000000000000000000000000000000000061207a565b9061207a565b905081811115611c205760009150611c7a565b6000878211611c2f5787611c31565b425b905082811015611c4657829350505050610bf4565b611c76611c538887611e87565b611c70611c608887612f22565b611c6a8b86612f22565b90611e87565b90612f95565b9250505b5095945050505050565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e588886001811115611cb457fe5b8888604051602001611cca959493929190614118565b604051602081830303815290604052805190602001209050600060435482604051602001611cf9929190613fe4565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051611d36949392919061418a565b6020604051602081039080840390855afa158015611d58573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611dd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906141f2565b73ffffffffffffffffffffffffffffffffffffffff811660009081526044602052604090208054600181019091558814611e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614297565b86421115611e70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490614260565b611e7b818b8b61250f565b50505050505050505050565b600082820183811015610a3a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316611f9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145706024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661200b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061446b6022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000610a3a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061245e565b6000806120cd853086611296610757565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d6020526040812054919250906121019083611e87565b905081156116505783156121385773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a76868360405161216992919061406c565b60405180910390a195945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166121e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061452a6021913960400191505060405180910390fd5b6121f282600083612fd7565b61223c816040518060600160405280602281526020016144496022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902054919061245e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205560025461226f908261207a565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261162c90849061315b565b600061235c84610bfc565b905061236a848260016120bc565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461244d5760006123a984610bfc565b90506123b7848260016120bc565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e60205260409020546123ea81858785611b82565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e6020526040902055828414801561241e57508015155b1561244a5773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b612458848484613399565b50505050565b60008184841115612507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124cc5781810151838201526020016124b4565b50505050905090810190601f1680156124f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff821661259157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f44454c454741544545000000000000000000000000000000604482015290519081900360640190fd5b600061259c82612692565b9250505060006125ab85610bfc565b905060006125b986846126cc565b73ffffffffffffffffffffffffffffffffffffffff878116600090815260208690526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918816919091179055905061261a81868487613569565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd866040518082600181111561267a57fe5b815260200191505060405180910390a3505050505050565b60008080808460018111156126a357fe5b14156126b957506006915060079050603f6126c5565b50604091506041905060425b9193909250565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526020839052604081205490911680610a3a5783915050610751565b600290565b600080805b835181101561282f576000603c600086848151811061272957fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081206001810154815488519294506127b4926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a90889081106127a357fe5b602002602001015160400151613861565b905061282361281c8785815181106127c857fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613975565b8590611e87565b9350505060010161270e565b509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261245890859061315b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c602090815260408083209388168352600284019091528120549091908280612914888588612ad6565b90508083146129995786156129315761292e878285613975565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b9061299090859061409d565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612a2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612a3360008383612fd7565b600254612a409082611e87565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054612a739082611e87565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1642811415612b1757509050610a3a565b8454600090612b3b9084906fffffffffffffffffffffffffffffffff168488613861565b9050828114612b9c578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc82604051612b93919061409d565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b600043821115612c4657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f424c4f434b5f4e554d424552000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020859052604090205480612c8257612c7a84610bfc565b915050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850184529091529020546fffffffffffffffffffffffffffffffff168310612d6a5773ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401835292905220546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104169050610bf4565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602087815260408083208380529091529020546fffffffffffffffffffffffffffffffff16831015612dbc576000915050610bf4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b81811115612ec1576002828203048103612dfa613c27565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260208a815260408083208484528252918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415612e9057602001516fffffffffffffffffffffffffffffffff169450610bf49350505050565b80516fffffffffffffffffffffffffffffffff16871115612eb357819350612eba565b6001820392505b5050612de2565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526020888152604080832093835292905220546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000090910416915050949350505050565b600082612f3157506000610751565b82820282848281612f3e57fe5b0414610a3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806144b36021913960400191505060405180910390fd5b6000610a3a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613997565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603f6020526040808220548584168352912054908216911681613015578491505b73ffffffffffffffffffffffffffffffffffffffff81166130335750825b6130408282856000613569565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526042602052604080822054878416835291205490821691168161307e578691505b73ffffffffffffffffffffffffffffffffffffffff811661309c5750845b6130a98282876001613569565b60085473ffffffffffffffffffffffffffffffffffffffff168015613151576040517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690634a3931499061311e908b908b908b9060040161403b565b600060405180830381600087803b15801561313857600080fd5b505af115801561314c573d6000803e3d6000fd5b505050505b5050505050505050565b61317a8273ffffffffffffffffffffffffffffffffffffffff16613a16565b6131e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061324e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613211565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146132b0576040519150601f19603f3d011682016040523d82523d6000602084013e6132b5565b606091505b50915091508161332657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156124585780806020019051602081101561334257600080fd5b5051612458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614594602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316613405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061454b6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613471576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806144266023913960400191505060405180910390fd5b61347c838383612fd7565b6134c68160405180606001604052806026815260200161448d6026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919061245e565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546135029082611e87565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156135a257612458565b6000806135ae83612692565b50909250905073ffffffffffffffffffffffffffffffffffffffff8616156137095773ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812054801561367a5773ffffffffffffffffffffffffffffffffffffffff88166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff169150613686565b61368388610bfc565b91505b61369c84848a85613697818c61207a565b613a4f565b73ffffffffffffffffffffffffffffffffffffffff88167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f6136de848961207a565b87604051808381526020018260018111156136f557fe5b81526020019250505060405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8516156138595773ffffffffffffffffffffffffffffffffffffffff851660009081526020829052604081205480156137cf5773ffffffffffffffffffffffffffffffffffffffff87166000908152602085815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501845290915290205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1691506137db565b6137d887610bfc565b91505b6137ec84848985613697818c611e87565b73ffffffffffffffffffffffffffffffffffffffff87167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f61382e8489611e87565b876040518083815260200182600181111561384557fe5b81526020019250505060405180910390a250505b505050505050565b600083158061386e575081155b8061388a575042836fffffffffffffffffffffffffffffffff16145b806138c757507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156138d3575083610bf4565b60007f000000000000000000000000000000000000000000000000000000000000000042116139025742613924565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000613944826fffffffffffffffffffffffffffffffff871661207a565b905061396a87611c6a86611c70670de0b6b3a76400006139648c88612f22565b90612f22565b979650505050505050565b6000610bf4670de0b6b3a7640000611c70613990868661207a565b8790612f22565b60008183613a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156124cc5781810151838201526020016124b4565b506000838581613a0c57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020858152604080832054918890529091204391908115801590613ad457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152602082905260409020546fffffffffffffffffffffffffffffffff8481169116145b15613b3d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055613151565b6040805180820182526fffffffffffffffffffffffffffffffff8086168252868116602080840191825260008781528682528581209451855493518516700100000000000000000000000000000000029085167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909416939093179093169190911790925573ffffffffffffffffffffffffffffffffffffffff8916815290899052206001830190555050505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2357600080fd5b803560028110610c2357600080fd5b803560ff81168114610c2357600080fd5b600060208284031215613c93578081fd5b610a3a82613c3e565b60008060408385031215613cae578081fd5b613cb783613c3e565b9150613cc560208401613c3e565b90509250929050565b600080600060608486031215613ce2578081fd5b613ceb84613c3e565b9250613cf960208501613c3e565b9150604084013590509250925092565b600080600080600080600060e0888a031215613d23578283fd5b613d2c88613c3e565b9650613d3a60208901613c3e565b95506040880135945060608801359350613d5660808901613c71565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613d84578182fd5b613d8d83613c3e565b9150613cc560208401613c62565b600080600080600080600060e0888a031215613db5578283fd5b613dbe88613c3e565b9650613d3a60208901613c62565b60008060408385031215613dde578182fd5b613de783613c3e565b946020939093013593505050565b600080600060608486031215613e09578283fd5b613e1284613c3e565b925060208401359150613e2760408501613c62565b90509250925092565b60008060008060008060c08789031215613e48578182fd5b613e5187613c3e565b95506020870135945060408701359350613e6d60608801613c71565b92506080870135915060a087013590509295509295509295565b60008060208385031215613e99578182fd5b823567ffffffffffffffff80821115613eb0578384fd5b818501915085601f830112613ec3578384fd5b813581811115613ed1578485fd5b866020606083028501011115613ee5578485fd5b60209290920196919550909350505050565b600060208284031215613f08578081fd5b81356fffffffffffffffffffffffffffffffff81168114610a3a578182fd5b600060208284031215613f38578081fd5b5035919050565b60008060008060808587031215613f54578182fd5b8435935060208501359250613f6b60408601613c3e565b9396929550929360600135925050565b60008151808452815b81811015613fa057602081850181015186830182015201613f84565b81811115613fb15782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b94855273ffffffffffffffffffffffffffffffffffffffff93909316602085015260408401919091526060830152608082015260a00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610a3a6020830184613f7b565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526012908201527f494e56414c49445f45585049524154494f4e0000000000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4f574e455200000000000000000000000000000000000000604082015260600190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60ff9190911681526020019056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220429852e7a0def53a34ad922b7e3d08d6dddc39a9398aa3132648753531de835764736f6c63430007050033",
  "devdoc": {
    "author": "Aave*",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claimRewards(address,uint256)": {
        "details": "Claims an `amount` of `REWARD_TOKEN` to the address `to`",
        "params": {
          "amount": "Amount to stake*",
          "to": "Address to stake for"
        }
      },
      "configureAssets((uint128,uint256,address)[])": {
        "details": "Configures the distribution of rewards for a list of assets",
        "params": {
          "assetsConfigInput": "The list of configurations to apply*"
        }
      },
      "cooldown()": {
        "details": "Activates the cooldown period to unstake - It can't be called if the user is not staking*"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "delegates all the powers to a specific user",
        "params": {
          "delegatee": "the user to which the power will be delegated*"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates power from signatory to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "delegateByType(address,uint8)": {
        "details": "delegates one specific power to a delegatee",
        "params": {
          "delegatee": "the user which delegated power has changed",
          "delegationType": "the type of delegation (VOTING_POWER, PROPOSITION_POWER)*"
        }
      },
      "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates power from signatory to `delegatee`",
        "params": {
          "delegatee": "The address to delegate votes to",
          "delegationType": "the type of delegation (VOTING_POWER, PROPOSITION_POWER)",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getDelegateeByType(address,uint8)": {
        "details": "returns the delegatee of an user",
        "params": {
          "delegator": "the address of the delegator*"
        }
      },
      "getNextCooldownTimestamp(uint256,uint256,address,uint256)": {
        "details": "Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \"worse\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0",
        "params": {
          "amountToReceive": "Amount",
          "fromCooldownTimestamp": "Cooldown timestamp of the sender",
          "toAddress": "Address of the recipient",
          "toBalance": "Current balance of the receiver"
        },
        "returns": {
          "_0": "The new cooldown timestamp*"
        }
      },
      "getPowerAtBlock(address,uint256,uint8)": {
        "details": "returns the delegated power of a user at a certain block",
        "params": {
          "user": "the user*"
        }
      },
      "getPowerCurrent(address,uint8)": {
        "details": "returns the current delegated power of a user. The current power is the power delegated at the time of the last snapshot",
        "params": {
          "user": "the user*"
        }
      },
      "getTotalRewardsBalance(address)": {
        "details": "Return the total rewards pending to claim by an staker",
        "params": {
          "staker": "The staker address"
        },
        "returns": {
          "_0": "The rewards"
        }
      },
      "getUserAssetData(address,address)": {
        "details": "Returns the data of an user on a distribution",
        "params": {
          "asset": "The address of the reference asset of the distribution",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The new index*"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize()": {
        "details": "Called by the proxy contract*"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md",
        "params": {
          "deadline": "the deadline timestamp, type(uint256).max for no deadline",
          "owner": "the owner of the funds",
          "r": "signature param",
          "s": "signature param",
          "spender": "the spender",
          "v": "signature param",
          "value": "the amount"
        }
      },
      "redeem(address,uint256)": {
        "details": "Redeems staked tokens, and stop earning rewards",
        "params": {
          "amount": "Amount to redeem*",
          "to": "Address to redeem to"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalSupplyAt(uint256)": {
        "details": "returns the total supply at a certain block number used by the voting strategy contracts to calculate the total votes needed for threshold/quorum In this initial implementation with no AAVE minting, simply returns the current supply A snapshots mapping will need to be added in case a mint function is added to the AAVE token in the future*"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "StakedAaveV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELEGATE_BY_TYPE_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "REWARDS_VAULT()": {
        "notice": "Address to pull from the rewards, needs to have approved this contract"
      },
      "UNSTAKE_WINDOW()": {
        "notice": "Seconds available to redeem once the cooldown period is fullfilled"
      }
    },
    "notice": "StakedTokenV2 with AAVE token as staked token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 263,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 269,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 271,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 275,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 277,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 2687,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_votingSnapshots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)977_storage))"
      },
      {
        "astId": 2691,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_votingSnapshotsCounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2694,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_aaveGovernance",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITransferHook)1786"
      },
      {
        "astId": 5701,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5732,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "______gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3095,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "assets",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_struct(AssetData)3084_storage)"
      },
      {
        "astId": 4508,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "stakerRewardsToClaim",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4512,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "stakersCooldowns",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4517,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_votingDelegates",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4523,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_propositionPowerSnapshots",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)977_storage))"
      },
      {
        "astId": 4527,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_propositionPowerSnapshotsCounts",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4531,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_propositionPowerDelegates",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4533,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "67",
        "type": "t_bytes32"
      },
      {
        "astId": 4554,
        "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
        "label": "_nonces",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITransferHook)1786": {
        "encoding": "inplace",
        "label": "contract ITransferHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)977_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Snapshot)977_storage)"
      },
      "t_mapping(t_address,t_struct(AssetData)3084_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AaveDistributionManager.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)3084_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)977_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernancePowerDelegationERC20.Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)977_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetData)3084_storage": {
        "encoding": "inplace",
        "label": "struct AaveDistributionManager.AssetData",
        "members": [
          {
            "astId": 3075,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "emissionPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3077,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "lastUpdateTimestamp",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3079,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3083,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "users",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Snapshot)977_storage": {
        "encoding": "inplace",
        "label": "struct GovernancePowerDelegationERC20.Snapshot",
        "members": [
          {
            "astId": 974,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 976,
            "contract": "@aave/safety-module/contracts/stake/StakedAaveV2.sol:StakedAaveV2",
            "label": "value",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}