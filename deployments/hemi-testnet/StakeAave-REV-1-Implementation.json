{
  "address": "0xeDf3B0796cD3C44c430C6aCf41555f76c5815532",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cooldownSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeWindow",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "distributionDuration",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emission",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AssetIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Cooldown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "oldValue",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newValue",
          "type": "uint128"
        }
      ],
      "name": "SnapshotDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "UserIndexUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_END",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_aaveGovernance",
      "outputs": [
        {
          "internalType": "contract ITransferHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_countsSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_snapshots",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "blockNumber",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "value",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "emissionPerSecond",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastUpdateTimestamp",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "emissionPerSecond",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            }
          ],
          "internalType": "struct DistributionTypes.AssetConfigInput[]",
          "name": "assetsConfigInput",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromCooldownTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToReceive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "getNextCooldownTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getTotalRewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUserAssetData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITransferHook",
          "name": "aaveGovernance",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakerRewardsToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakersCooldowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4644a1a10a0a86b680aa1aa14ea6dc53272a66015799bd809b91dc1092ffaec4",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0xeDf3B0796cD3C44c430C6aCf41555f76c5815532",
    "transactionIndex": 1,
    "gasUsed": "2927115",
    "logsBloom": "0x
    "blockHash": "0xd63a4295ae7060da09f23ee30f071aa9098e15550f65a071202f58d25b111692",
    "transactionHash": "0x4644a1a10a0a86b680aa1aa14ea6dc53272a66015799bd809b91dc1092ffaec4",
    "logs": [],
    "blockNumber": 188436,
    "cumulativeGasUsed": "2979604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33Aa8F94428C0F891dFd77DD141878aBCaEFEbe8",
    "0x33Aa8F94428C0F891dFd77DD141878aBCaEFEbe8",
    "3600",
    "1800",
    "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "3600000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca768f67316cb6bfee509981c7ccb788",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldValue\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newValue\",\"type\":\"uint128\"}],\"name\":\"SnapshotDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aaveGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_countsSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_snapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"aaveGovernance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"returns the allowance of spender on the tokens owned by owner\",\"params\":{\"owner\":\"the owner of the tokens\",\"spender\":\"the user allowed to spend the owner's tokens\"},\"returns\":{\"_0\":\"the amount of owner's tokens spender is allowed to spend*\"}},\"approve(address,uint256)\":{\"details\":\"allows spender to spend the tokens owned by msg.sender\",\"params\":{\"spender\":\"the user allowed to spend msg.sender tokens\"},\"returns\":{\"_0\":\"true*\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the balance of the token*\"}},\"claimRewards(address,uint256)\":{\"details\":\"Claims an `amount` of `REWARD_TOKEN` to the address `to`\",\"params\":{\"amount\":\"Amount to stake*\",\"to\":\"Address to stake for\"}},\"configureAssets((uint128,uint256,address)[])\":{\"details\":\"Configures the distribution of rewards for a list of assets\",\"params\":{\"assetsConfigInput\":\"The list of configurations to apply*\"}},\"cooldown()\":{\"details\":\"Activates the cooldown period to unstake - It can't be called if the user is not staking*\"},\"decimals()\":{\"returns\":{\"_0\":\"the decimals of the token*\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"decreases the allowance of spender to spend msg.sender tokens\",\"params\":{\"spender\":\"the user allowed to spend on behalf of msg.sender\",\"subtractedValue\":\"the amount being subtracted to the allowance\"},\"returns\":{\"_0\":\"true*\"}},\"getNextCooldownTimestamp(uint256,uint256,address,uint256)\":{\"details\":\"Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \\\"worse\\\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0\",\"params\":{\"amountToReceive\":\"Amount\",\"fromCooldownTimestamp\":\"Cooldown timestamp of the sender\",\"toAddress\":\"Address of the recipient\",\"toBalance\":\"Current balance of the receiver\"},\"returns\":{\"_0\":\"The new cooldown timestamp*\"}},\"getTotalRewardsBalance(address)\":{\"details\":\"Return the total rewards pending to claim by an staker\",\"params\":{\"staker\":\"The staker address\"},\"returns\":{\"_0\":\"The rewards\"}},\"getUserAssetData(address,address)\":{\"details\":\"Returns the data of an user on a distribution\",\"params\":{\"asset\":\"The address of the reference asset of the distribution\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The new index*\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"increases the allowance of spender to spend msg.sender tokens\",\"params\":{\"addedValue\":\"the amount being added to the allowance\",\"spender\":\"the user allowed to spend on behalf of msg.sender\"},\"returns\":{\"_0\":\"true*\"}},\"initialize(address,string,string,uint8)\":{\"details\":\"Called by the proxy contract*\"},\"name()\":{\"returns\":{\"_0\":\"the name of the token*\"}},\"redeem(address,uint256)\":{\"details\":\"Redeems staked tokens, and stop earning rewards\",\"params\":{\"amount\":\"Amount to redeem*\",\"to\":\"Address to redeem to\"}},\"symbol()\":{\"returns\":{\"_0\":\"the symbol of the token*\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"the total supply of the token*\"}},\"transfer(address,uint256)\":{\"details\":\"executes a transfer of tokens from msg.sender to recipient\",\"params\":{\"amount\":\"the amount of tokens being transferred\",\"recipient\":\"the recipient of the tokens\"},\"returns\":{\"_0\":\"true if the transfer succeeds, false otherwise*\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\",\"params\":{\"amount\":\"the amount of tokens being transferred\",\"recipient\":\"the recipient of the tokens\",\"sender\":\"the owner of the tokens\"},\"returns\":{\"_0\":\"true if the transfer succeeds, false otherwise*\"}}},\"title\":\"StakedAave\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"REWARDS_VAULT()\":{\"notice\":\"Address to pull from the rewards, needs to have approved this contract\"},\"UNSTAKE_WINDOW()\":{\"notice\":\"Seconds available to redeem once the cooldown period is fullfilled\"}},\"notice\":\"StakedToken with AAVE token as staked token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/safety-module/contracts/stake/StakedAave.sol\":\"StakedAave\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/safety-module/contracts/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external;\\n}\\n\",\"keccak256\":\"0xb9f57138a1840eea2b01e686f7fcfc296a631ba602c9404b70752ecb8f86f8db\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x150506e2e40dc3cea841fe0ade6021b9b0d4e09f7616d312bc7c1300a2d7a94f\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\n/**\\n * @dev Interface for ERC20 including metadata\\n **/\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7c5310c66f68c2e72afcafbdaa4e2d8dce9b3bdaab553274ddf96a597ed863ef\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/IStakedAave.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x757fb8a77394148520347549d7d339f5902e4beb113db528788e2d44b0bb7289\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/interfaces/ITransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface ITransferHook {\\n  function onTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1e060af926104d5750b18ab3594b65ec354c14022f35acf06cf109f2f5e91908\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x456a1aebf00cb1f2987ca41f1924e4811703f10800a34ecb759e5d1dc472bb78\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xb4df619dd013c574e0d5188bd1f52908898745703bc055e07e88f90b0fba6601\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint128 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\",\"keccak256\":\"0x8d71c65f5244916694428b5943f58d80250576666e8067eb4914aa2794f17aaa\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {Context} from './Context.sol';\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IERC20Detailed} from '../interfaces/IERC20Detailed.sol';\\nimport {SafeMath} from './SafeMath.sol';\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave\\n **/\\ncontract ERC20 is Context, IERC20, IERC20Detailed {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n  }\\n\\n  /**\\n   * @return the name of the token\\n   **/\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @return the symbol of the token\\n   **/\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @return the decimals of the token\\n   **/\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @return the total supply of the token\\n   **/\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @return the balance of the token\\n   **/\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev executes a transfer of tokens from msg.sender to recipient\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev returns the allowance of spender on the tokens owned by owner\\n   * @param owner the owner of the tokens\\n   * @param spender the user allowed to spend the owner's tokens\\n   * @return the amount of owner's tokens spender is allowed to spend\\n   **/\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev allows spender to spend the tokens owned by msg.sender\\n   * @param spender the user allowed to spend msg.sender tokens\\n   * @return true\\n   **/\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n   * @param sender the owner of the tokens\\n   * @param recipient the recipient of the tokens\\n   * @param amount the amount of tokens being transferred\\n   * @return true if the transfer succeeds, false otherwise\\n   **/\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev increases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param addedValue the amount being added to the allowance\\n   * @return true\\n   **/\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev decreases the allowance of spender to spend msg.sender tokens\\n   * @param spender the user allowed to spend on behalf of msg.sender\\n   * @param subtractedValue the amount being subtracted to the allowance\\n   * @return true\\n   **/\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3308bb3d8d3c5076d4db352fe8c994506ac813e45a44acb121980097f8153996\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/ERC20WithSnapshot.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nimport {ERC20} from '../lib/ERC20.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\n\\n/**\\n * @title ERC20WithSnapshot\\n * @notice ERC20 including snapshots of balances on transfer-related actions\\n * @author Aave\\n **/\\ncontract ERC20WithSnapshot is ERC20 {\\n  using SafeMath for uint256;\\n\\n  /// @dev snapshot of a value on a specific block, used for balances\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  mapping(address => mapping(uint256 => Snapshot)) public _snapshots;\\n  mapping(address => uint256) public _countsSnapshots;\\n  /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer\\n  /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility\\n  /// to control all potential reentrancies by calling back the this contract\\n  ITransferHook public _aaveGovernance;\\n\\n  event SnapshotDone(address owner, uint128 oldValue, uint128 newValue);\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public ERC20(name, symbol, decimals) {}\\n\\n  function _setAaveGovernance(ITransferHook aaveGovernance) internal virtual {\\n    _aaveGovernance = aaveGovernance;\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot for an owner of tokens\\n   * @param owner The owner of the tokens\\n   * @param oldValue The value before the operation that is gonna be executed after the snapshot\\n   * @param newValue The value after the operation\\n   */\\n  function _writeSnapshot(\\n    address owner,\\n    uint128 oldValue,\\n    uint128 newValue\\n  ) internal virtual {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerCountOfSnapshots = _countsSnapshots[owner];\\n    mapping(uint256 => Snapshot) storage snapshotsOwner = _snapshots[owner];\\n\\n    // Doing multiple operations in the same block\\n    if (\\n      ownerCountOfSnapshots != 0 &&\\n      snapshotsOwner[ownerCountOfSnapshots.sub(1)].blockNumber == currentBlock\\n    ) {\\n      snapshotsOwner[ownerCountOfSnapshots.sub(1)].value = newValue;\\n    } else {\\n      snapshotsOwner[ownerCountOfSnapshots] = Snapshot(currentBlock, newValue);\\n      _countsSnapshots[owner] = ownerCountOfSnapshots.add(1);\\n    }\\n\\n    emit SnapshotDone(owner, oldValue, newValue);\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\\n   * - On _transfer, it writes snapshots for both \\\"from\\\" and \\\"to\\\"\\n   * - On _mint, only for _to\\n   * - On _burn, only for _from\\n   * @param from the from address\\n   * @param to the to address\\n   * @param amount the amount to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    if (from != address(0)) {\\n      uint256 fromBalance = balanceOf(from);\\n      _writeSnapshot(from, uint128(fromBalance), uint128(fromBalance.sub(amount)));\\n    }\\n    if (to != address(0)) {\\n      uint256 toBalance = balanceOf(to);\\n      _writeSnapshot(to, uint128(toBalance), uint128(toBalance.add(amount)));\\n    }\\n\\n    // caching the aave governance address to avoid multiple state loads\\n    ITransferHook aaveGovernance = _aaveGovernance;\\n    if (aaveGovernance != ITransferHook(0)) {\\n      aaveGovernance.onTransfer(from, to, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd7c631c298da697894c98fa9e8ec6760c56979d62d5e7bdb485ca71c42af9033\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbba27d4b67c08f2a51ecf534aadfd510260996fcf91299691e955ee7539dd5a0\",\"license\":\"MIT\"},\"@aave/safety-module/contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0xf32a71745588178f5f64b96e7766589e48d5402c4679b3c04085760f9437f00b\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/AaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../lib/SafeMath.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\n/**\\n * @title AaveDistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Aave\\n **/\\ncontract AaveDistributionManager is IAaveDistributionManager {\\n  using SafeMath for uint256;\\n\\n  struct AssetData {\\n    uint128 emissionPerSecond;\\n    uint128 lastUpdateTimestamp;\\n    uint256 index;\\n    mapping(address => uint256) users;\\n  }\\n\\n  uint256 public immutable DISTRIBUTION_END;\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 public constant PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n\\n  constructor(address emissionManager, uint256 distributionDuration) public {\\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Configures the distribution of rewards for a list of assets\\n   * @param assetsConfigInput The list of configurations to apply\\n   **/\\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\\n    external\\n    override\\n  {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n\\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address underlyingAsset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex =\\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\\n\\n    if (newIndex != oldIndex) {\\n      assetConfig.index = newIndex;\\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\\n    }\\n\\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards = 0;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex != newIndex) {\\n      if (stakedByUser != 0) {\\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      }\\n\\n      assetData.users[user] = newIndex;\\n      emit UserIndexUpdated(user, asset, newIndex);\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      accruedRewards = accruedRewards.add(\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        )\\n      );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards = 0;\\n\\n    for (uint256 i = 0; i < stakes.length; i++) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex =\\n        _getAssetIndex(\\n          assetConfig.index,\\n          assetConfig.emissionPerSecond,\\n          assetConfig.lastUpdateTimestamp,\\n          stakes[i].totalStaked\\n        );\\n\\n      accruedRewards = accruedRewards.add(\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\\n      );\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= DISTRIBUTION_END\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp =\\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\\n    return\\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\\n        currentIndex\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\\n    return assets[asset].users[user];\\n  }\\n}\\n\",\"keccak256\":\"0x1f639ee1fe125ee2122aefd7b849b54d548b3dd7623280ae216320e98f2c6d3c\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/StakedAave.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {StakedToken} from './StakedToken.sol';\\n\\n/**\\n * @title StakedAave\\n * @notice StakedToken with AAVE token as staked token\\n * @author Aave\\n **/\\ncontract StakedAave is StakedToken {\\n  string internal constant NAME = 'Staked Aave';\\n  string internal constant SYMBOL = 'stkAAVE';\\n  uint8 internal constant DECIMALS = 18;\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration\\n  )\\n    public\\n    StakedToken(\\n      stakedToken,\\n      rewardToken,\\n      cooldownSeconds,\\n      unstakeWindow,\\n      rewardsVault,\\n      emissionManager,\\n      distributionDuration,\\n      NAME,\\n      SYMBOL,\\n      DECIMALS\\n    )\\n  {}\\n}\\n\",\"keccak256\":\"0xec343ba4e73b6a66509186d38f3c30ccbdb69f0df2b4f9a299240314ee396b97\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/stake/StakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {IStakedAave} from '../interfaces/IStakedAave.sol';\\nimport {ITransferHook} from '../interfaces/ITransferHook.sol';\\nimport {ERC20WithSnapshot} from '../lib/ERC20WithSnapshot.sol';\\nimport {SafeERC20} from '../lib/SafeERC20.sol';\\nimport {VersionedInitializable} from '../utils/VersionedInitializable.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {AaveDistributionManager} from './AaveDistributionManager.sol';\\nimport {SafeMath} from '../lib/SafeMath.sol';\\n\\n/**\\n * @title StakedToken\\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\\n * @author Aave\\n **/\\ncontract StakedToken is\\n  IStakedAave,\\n  ERC20WithSnapshot,\\n  VersionedInitializable,\\n  AaveDistributionManager\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant REVISION = 1;\\n\\n  IERC20 public immutable STAKED_TOKEN;\\n  IERC20 public immutable REWARD_TOKEN;\\n  uint256 public immutable COOLDOWN_SECONDS;\\n\\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\\n  uint256 public immutable UNSTAKE_WINDOW;\\n\\n  /// @notice Address to pull from the rewards, needs to have approved this contract\\n  address public immutable REWARDS_VAULT;\\n\\n  mapping(address => uint256) public stakerRewardsToClaim;\\n  mapping(address => uint256) public stakersCooldowns;\\n\\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\\n  event Redeem(address indexed from, address indexed to, uint256 amount);\\n\\n  event RewardsAccrued(address user, uint256 amount);\\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\\n\\n  event Cooldown(address indexed user);\\n\\n  constructor(\\n    IERC20 stakedToken,\\n    IERC20 rewardToken,\\n    uint256 cooldownSeconds,\\n    uint256 unstakeWindow,\\n    address rewardsVault,\\n    address emissionManager,\\n    uint128 distributionDuration,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  )\\n    public\\n    ERC20WithSnapshot(name, symbol, decimals)\\n    AaveDistributionManager(emissionManager, distributionDuration)\\n  {\\n    STAKED_TOKEN = stakedToken;\\n    REWARD_TOKEN = rewardToken;\\n    COOLDOWN_SECONDS = cooldownSeconds;\\n    UNSTAKE_WINDOW = unstakeWindow;\\n    REWARDS_VAULT = rewardsVault;\\n  }\\n\\n  /**\\n   * @dev Called by the proxy contract\\n   **/\\n  function initialize(\\n    ITransferHook aaveGovernance,\\n    string calldata name,\\n    string calldata symbol,\\n    uint8 decimals\\n  ) external initializer {\\n    _setName(name);\\n    _setSymbol(symbol);\\n    _setDecimals(decimals);\\n    _setAaveGovernance(aaveGovernance);\\n  }\\n\\n  function stake(address onBehalfOf, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\\n\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(onBehalfOf, address(this), balanceOfUser, totalSupply());\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\\n    }\\n\\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\\n\\n    _mint(onBehalfOf, amount);\\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit Staked(msg.sender, onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @dev Redeems staked tokens, and stop earning rewards\\n   * @param to Address to redeem to\\n   * @param amount Amount to redeem\\n   **/\\n  function redeem(address to, uint256 amount) external override {\\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\\n    //solium-disable-next-line\\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\\n    require(\\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\\n      'INSUFFICIENT_COOLDOWN'\\n    );\\n    require(\\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\\n      'UNSTAKE_WINDOW_FINISHED'\\n    );\\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\\n\\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\\n\\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\\n\\n    _burn(msg.sender, amountToRedeem);\\n\\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\\n      stakersCooldowns[msg.sender] = 0;\\n    }\\n\\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\\n\\n    emit Redeem(msg.sender, to, amountToRedeem);\\n  }\\n\\n  /**\\n   * @dev Activates the cooldown period to unstake\\n   * - It can't be called if the user is not staking\\n   **/\\n  function cooldown() external override {\\n    require(balanceOf(msg.sender) != 0, 'INVALID_BALANCE_ON_COOLDOWN');\\n    //solium-disable-next-line\\n    stakersCooldowns[msg.sender] = block.timestamp;\\n\\n    emit Cooldown(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\\n   * @param to Address to stake for\\n   * @param amount Amount to stake\\n   **/\\n  function claimRewards(address to, uint256 amount) external override {\\n    uint256 newTotalRewards =\\n      _updateCurrentUnclaimedRewards(msg.sender, balanceOf(msg.sender), false);\\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\\n\\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, 'INVALID_AMOUNT');\\n\\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\\n\\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\\n  }\\n\\n  /**\\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\\n   * @param from Address to transfer from\\n   * @param to Address to transfer to\\n   * @param amount Amount to transfer\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    uint256 balanceOfFrom = balanceOf(from);\\n    // Sender\\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\\n\\n    // Recipient\\n    if (from != to) {\\n      uint256 balanceOfTo = balanceOf(to);\\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\\n\\n      uint256 previousSenderCooldown = stakersCooldowns[from];\\n      stakersCooldowns[to] = getNextCooldownTimestamp(\\n        previousSenderCooldown,\\n        amount,\\n        to,\\n        balanceOfTo\\n      );\\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\\n        stakersCooldowns[from] = 0;\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Updates the user state related with his accrued rewards\\n   * @param user Address of the user\\n   * @param userBalance The current balance of the user\\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\\n   * @return The unclaimed rewards that were added to the total accrued\\n   **/\\n  function _updateCurrentUnclaimedRewards(\\n    address user,\\n    uint256 userBalance,\\n    bool updateStorage\\n  ) internal returns (uint256) {\\n    uint256 accruedRewards =\\n      _updateUserAssetInternal(user, address(this), userBalance, totalSupply());\\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\\n\\n    if (accruedRewards != 0) {\\n      if (updateStorage) {\\n        stakerRewardsToClaim[user] = unclaimedRewards;\\n      }\\n      emit RewardsAccrued(user, accruedRewards);\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\\n   *  - If the timestamp of the sender is \\\"better\\\" or the timestamp of the recipient is 0, we take the one of the recipient\\n   *  - Weighted average of from/to cooldown timestamps if:\\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\\n   *    # The sender timestamp is expired\\n   *    # The sender has a \\\"worse\\\" timestamp\\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\\n   * @param amountToReceive Amount\\n   * @param toAddress Address of the recipient\\n   * @param toBalance Current balance of the receiver\\n   * @return The new cooldown timestamp\\n   **/\\n  function getNextCooldownTimestamp(\\n    uint256 fromCooldownTimestamp,\\n    uint256 amountToReceive,\\n    address toAddress,\\n    uint256 toBalance\\n  ) public view returns (uint256) {\\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\\n    if (toCooldownTimestamp == 0) {\\n      return 0;\\n    }\\n\\n    uint256 minimalValidCooldownTimestamp =\\n      block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\\n\\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\\n      toCooldownTimestamp = 0;\\n    } else {\\n      uint256 fromCooldownTimestamp =\\n        (minimalValidCooldownTimestamp > fromCooldownTimestamp)\\n          ? block.timestamp\\n          : fromCooldownTimestamp;\\n\\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\\n        return toCooldownTimestamp;\\n      } else {\\n        toCooldownTimestamp = (\\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\\n        )\\n          .div(amountToReceive.add(toBalance));\\n      }\\n    }\\n    return toCooldownTimestamp;\\n  }\\n\\n  /**\\n   * @dev Return the total rewards pending to claim by an staker\\n   * @param staker The staker address\\n   * @return The rewards\\n   */\\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\\n    DistributionTypes.UserStakeInput[] memory userStakeInputs =\\n      new DistributionTypes.UserStakeInput[](1);\\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\\n      underlyingAsset: address(this),\\n      stakedByUser: balanceOf(staker),\\n      totalStaked: totalSupply()\\n    });\\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   * @return The revision\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n}\\n\",\"keccak256\":\"0x14d8b0b9054ef0250237d42fa5551a406c41c92bd39bae3d6a3b3a5114ba1333\",\"license\":\"agpl-3.0\"},\"@aave/safety-module/contracts/utils/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xedfec4c491ad24c0a1024fc801c22f2a16d1f316f2a5cdcc883e0bbc451cffc7\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x61016060405260006009553480156200001757600080fd5b5060405162003670380380620036708339810160408190526200003a9162000262565b868686868686866040518060400160405280600b81526020016a5374616b6564204161766560a81b8152506040518060400160405280600781526020016673746b4141564560c81b815250601284846001600160801b03168484848282828260039080519060200190620000b0929190620001b6565b508151620000c6906004906020850190620001b6565b5080600560006101000a81548160ff021916908360ff1602179055505050505050506200010281426200015460201b620014f41790919060201c565b608052506001600160601b0319606091821b811660a0529a811b8b1660c05298891b8a1660e05250505061010094909452506101209190915290911b9091166101405250620003189650505050505050565b600082820183811015620001af576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001ee576000855562000239565b82601f106200020957805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002395782518255916020019190600101906200021c565b50620002479291506200024b565b5090565b5b808211156200024757600081556001016200024c565b600080600080600080600060e0888a0312156200027d578283fd5b87516200028a81620002ff565b60208901519097506200029d81620002ff565b8096505060408801519450606088015193506080880151620002bf81620002ff565b60a0890151909350620002d281620002ff565b60c08901519092506001600160801b0381168114620002ef578182fd5b8091505092959891949750929550565b6001600160a01b03811681146200031557600080fd5b50565b60805160a05160601c60c05160601c60e05160601c61010051610120516101405160601c6132b7620003b960003980610b795280610d1f5250806106415280610924528061132a5250806105e3528061066952806109cb528061134f525080610c1c5280610ce852508061073c52806108ba5280610f86525080611023528061124b525080610b555280612731528061277652806127a352506132b76000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80638dbefee211610145578063adc9772e116100bd578063dd62ed3e1161008c578063f11b818811610071578063f11b81881461045b578063f1cc432a1461047d578063f6d2ee861461049057610241565b8063dd62ed3e14610440578063dde43cba1461045357610241565b8063adc9772e1461040a578063b2a5dbfa1461041d578063c3863ada14610430578063cbcbb5071461043857610241565b806399248ea711610114578063a457c2d7116100f9578063a457c2d7146103dc578063a9059cbb146103ef578063aaf5eb681461040257610241565b806399248ea7146103c15780639a99b4f0146103c957610241565b80638dbefee214610396578063919cd40f146103a9578063946776cd146103b157806395d89b41146103b957610241565b8063313ce567116101d857806370a08231116101a7578063787a08a61161018c578063787a08a6146103685780637e90d7ef146103705780638779588c1461038357610241565b806370a082311461034d57806372b49d631461036057610241565b8063313ce5671461030a5780633373ee4c1461031f578063359c4a9614610332578063395093511461033a57610241565b80631e9a6950116102145780631e9a6950146102ac57806323b872dd146102c15780632acbf823146102d4578063312f6b83146102f557610241565b806306fdde0314610246578063091030c314610264578063095ea7b31461028457806318160ddd146102a4575b600080fd5b61024e6104a3565b60405161025b9190612e97565b60405180910390f35b610277610272366004612c11565b610557565b60405161025b9190613088565b610297610292366004612ca5565b610569565b60405161025b9190612e8c565b610277610587565b6102bf6102ba366004612ca5565b61058d565b005b6102976102cf366004612c65565b6107cf565b6102e76102e2366004612ca5565b610871565b60405161025b929190613038565b6102fd6108b8565b60405161025b9190612e45565b6103126108dc565b60405161025b9190613091565b61027761032d366004612c2d565b6108e5565b610277610922565b610297610348366004612ca5565b610946565b61027761035b366004612c11565b6109a1565b6102776109c9565b6102bf6109ed565b61027761037e366004612c11565b610a66565b610277610391366004612c11565b610a78565b6102776103a4366004612c11565b610a8a565b610277610b53565b6102fd610b77565b61024e610b9b565b6102fd610c1a565b6102bf6103d7366004612ca5565b610c3e565b6102976103ea366004612ca5565b610db0565b6102976103fd366004612ca5565b610e25565b610312610e39565b6102bf610418366004612ca5565b610e3e565b6102bf61042b366004612cd0565b61100b565b6102fd61122d565b6102fd611249565b61027761044e366004612c2d565b61126d565b6102776112a5565b61046e610469366004612c11565b6112aa565b60405161025b9392919061305b565b61027761048b366004612e07565b6112ee565b6102bf61049e366004612d40565b6113f2565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061057d610576611568565b848461156c565b5060015b92915050565b60025490565b806105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f08565b60405180910390fd5b336000908152603e6020526040902054610607817f00000000000000000000000000000000000000000000000000000000000000006114f4565b421161063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f3f565b7f000000000000000000000000000000000000000000000000000000000000000061069461068d837f00000000000000000000000000000000000000000000000000000000000000006114f4565b42906116b3565b11156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612fad565b60006106d7336109a1565b905060008184116106e857836106ea565b815b90506106f8338360016116f5565b5061070333826117b4565b61070d82826116b3565b61072257336000908152603e60205260408120555b61076373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686836118fe565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9836040516107c09190613088565b60405180910390a35050505050565b60006107dc84848461198b565b610866846107e8611568565b610861856040518060600160405280602881526020016131736028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610833611568565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190611a98565b61156c565b5060015b9392505050565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061057d610953611568565b846108618560016000610964611568565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c1681529252902054906114f4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109f6336109a1565b610a2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612fe4565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b603d6020526000908152604090205481565b60076020526000908152604090205481565b60408051600180825281830190925260009160609190816020015b610aad612af2565b815260200190600190039081610aa557905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610af2856109a1565b8152602001610aff610587565b81525081600081518110610b0f57fe5b602002602001018190525061086a610b278483611b49565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d6020526040902054906114f4565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561054d5780601f106105225761010080835404028352916020019161054d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610c5433610c4d336109a1565b60006116f5565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8314610c855782610c87565b815b9050610cd3816040518060400160405280600e81526020017f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525084611a989092919063ffffffff16565b336000908152603d6020526040902055610d457f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684611c77565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051610da29190613088565b60405180910390a350505050565b600061057d610dbd611568565b846108618560405180606001604052806025815260200161325d6025913960016000610de7611568565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190611a98565b600061057d610e32611568565b848461198b565b601281565b80610e75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f08565b6000610e80836109a1565b90506000610e97843084610e92610587565b611d0c565b90508015610f2f577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768482604051610ed0929190612e66565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d6020526040902054610f0890826114f4565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b610f3c60008486856112ee565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e6020526040902055610f6c8484611de5565b610fae73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086611c77565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785604051610da29190613088565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461107a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f76565b60005b81811015611228576000603c600085858581811061109757fe5b90506060020160400160208101906110af9190612c11565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061112e8484848181106110fa57fe5b90506060020160400160208101906111129190612c11565b8286868681811061111f57fe5b90506060020160200135611f16565b5083838381811061113b57fe5b6111519260206060909202019081019150612dd7565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061119957fe5b90506060020160400160208101906111b19190612c11565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8585858181106111f457fe5b61120a9260206060909202019081019150612dd7565b604051611217919061301b565b60405180910390a25060010161107d565b505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600181565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e6020526040812054806113235760009150506113ea565b60006113797f0000000000000000000000000000000000000000000000000000000000000000611373427f00000000000000000000000000000000000000000000000000000000000000006116b3565b906116b3565b90508181111561138c57600091506113e6565b600087821161139b578761139d565b425b9050828110156113b2578293505050506113ea565b6113e26113bf88876114f4565b6113dc6113cc8887612015565b6113d68b86612015565b906114f4565b90612088565b9250505b5090505b949350505050565b60006113fc6120ca565b90506009548111611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061319b602e913960400191505060405180910390fd5b6009819055604080516020601f880181900481028201810190925286815261149a9188908890819084018382808284376000920191909152506120cf92505050565b6114d984848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120e692505050565b6114e2826120f9565b6114eb8761212d565b50505050505050565b60008282018381101561086a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b73ffffffffffffffffffffffffffffffffffffffff83166115d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061320f6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061310a6022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600061086a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a98565b600080611706853086610e92610587565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d60205260408120549192509061173a90836114f4565b905081156117ab5783156117715773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7686836040516117a2929190612e66565b60405180910390a15b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611820576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131c96021913960400191505060405180910390fd5b61182c82600083612174565b611876816040518060600160405280602281526020016130e86022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190611a98565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546118a990826116b3565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526112289084906122f2565b6000611996846109a1565b90506119a4848260016116f5565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a875760006119e3846109a1565b90506119f1848260016116f5565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e6020526040902054611a24818587856112ee565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260409020558284148015611a5857508015155b15611a845773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b611a92848484612530565b50505050565b60008184841115611b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b06578181015183820152602001611aee565b50505050905090810190601f168015611b335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080805b8351811015611c6f576000603c6000868481518110611b6957fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000908120600181015481548851929450611bf4926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a9088908110611be357fe5b602002602001015160400151612700565b9050611c63611c5c878581518110611c0857fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612814565b85906114f4565b93505050600101611b4e565b509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611a929085906122f2565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c602090815260408083209388168352600284019091528120549091908280611d54888588611f16565b9050808314611dd9578615611d7157611d6e878285612814565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b90611dd0908590613088565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611e7360008383612174565b600254611e8090826114f4565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611eb390826114f4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1642811415611f575750905061086a565b8454600090611f7b9084906fffffffffffffffffffffffffffffffff168488612700565b9050828114611fdc578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc82604051611fd39190613088565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b60008261202457506000610581565b8282028284828161203157fe5b041461086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131526021913960400191505060405180910390fd5b600061086a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612836565b600190565b80516120e2906003906020840190612b29565b5050565b80516120e2906004906020840190612b29565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121ad57611228565b73ffffffffffffffffffffffffffffffffffffffff8316156121ec5760006121d4846109a1565b90506121ea84826121e581866116b3565b6128b5565b505b73ffffffffffffffffffffffffffffffffffffffff821615612226576000612213836109a1565b905061222483826121e581866114f4565b505b60085473ffffffffffffffffffffffffffffffffffffffff168015611a92578073ffffffffffffffffffffffffffffffffffffffff16634a3931498585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156122d457600080fd5b505af11580156122e8573d6000803e3d6000fd5b5050505050505050565b6123118273ffffffffffffffffffffffffffffffffffffffff16612ab9565b61237c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106123e557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123a8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612447576040519150601f19603f3d011682016040523d82523d6000602084013e61244c565b606091505b5091509150816124bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611a92578080602001905160208110156124d957600080fd5b5051611a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613233602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831661259c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806131ea6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216612608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806130c56023913960400191505060405180910390fd5b612613838383612174565b61265d8160405180606001604052806026815260200161312c6026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190611a98565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461269990826114f4565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600083158061270d575081155b80612729575042836fffffffffffffffffffffffffffffffff16145b8061276657507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156127725750836113ea565b60007f000000000000000000000000000000000000000000000000000000000000000042116127a157426127c3565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006127e3826fffffffffffffffffffffffffffffffff87166116b3565b9050612809876113d6866113dc670de0b6b3a76400006128038c88612015565b90612015565b979650505050505050565b60006113ea670de0b6b3a76400006113dc61282f86866116b3565b8790612015565b6000818361289f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315611b06578181015183820152602001611aee565b5060008385816128ab57fe5b0495945050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600760209081526040808320546006909252909120439190811580159061293957506fffffffffffffffffffffffffffffffff83168160006129148560016116b3565b81526020810191909152604001600020546fffffffffffffffffffffffffffffffff16145b15612993578381600061294d8560016116b3565b8152602081019190915260400160002080546fffffffffffffffffffffffffffffffff928316700100000000000000000000000000000000029216919091179055612a49565b6040805180820182526fffffffffffffffffffffffffffffffff80861682528681166020808401918252600087815290869052939093209151825493518216700100000000000000000000000000000000029082167fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169390931716919091179055612a228260016114f4565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600760205260409020555b6040805173ffffffffffffffffffffffffffffffffffffffff881681526fffffffffffffffffffffffffffffffff808816602083015286168183015290517f2cd3c83ddac2953ee75f53265d9ea4463eaf05030e5459a1b7e63819b7ce88f79181900360600190a1505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113ea575050151592915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612b5f5760008555612ba5565b82601f10612b7857805160ff1916838001178555612ba5565b82800160010185558215612ba5579182015b82811115612ba5578251825591602001919060010190612b8a565b50612bb1929150612bb5565b5090565b5b80821115612bb15760008155600101612bb6565b60008083601f840112612bdb578182fd5b50813567ffffffffffffffff811115612bf2578182fd5b602083019150836020828501011115612c0a57600080fd5b9250929050565b600060208284031215612c22578081fd5b813561086a8161309f565b60008060408385031215612c3f578081fd5b8235612c4a8161309f565b91506020830135612c5a8161309f565b809150509250929050565b600080600060608486031215612c79578081fd5b8335612c848161309f565b92506020840135612c948161309f565b929592945050506040919091013590565b60008060408385031215612cb7578182fd5b8235612cc28161309f565b946020939093013593505050565b60008060208385031215612ce2578182fd5b823567ffffffffffffffff80821115612cf9578384fd5b818501915085601f830112612d0c578384fd5b813581811115612d1a578485fd5b866020606083028501011115612d2e578485fd5b60209290920196919550909350505050565b60008060008060008060808789031215612d58578182fd5b8635612d638161309f565b9550602087013567ffffffffffffffff80821115612d7f578384fd5b612d8b8a838b01612bca565b90975095506040890135915080821115612da3578384fd5b50612db089828a01612bca565b909450925050606087013560ff81168114612dc9578182fd5b809150509295509295509295565b600060208284031215612de8578081fd5b81356fffffffffffffffffffffffffffffffff8116811461086a578182fd5b60008060008060808587031215612e1c578384fd5b84359350602085013592506040850135612e358161309f565b9396929550929360600135925050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6000602080835283518082850152825b81811015612ec357858101830151858201604001528201612ea7565b81811115612ed45783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60ff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146130c157600080fd5b5056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122039bef5afce8f6ff90bfcc67f6bfa85b468995fc2f3183adda3faef1fab23d00f64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80638dbefee211610145578063adc9772e116100bd578063dd62ed3e1161008c578063f11b818811610071578063f11b81881461045b578063f1cc432a1461047d578063f6d2ee861461049057610241565b8063dd62ed3e14610440578063dde43cba1461045357610241565b8063adc9772e1461040a578063b2a5dbfa1461041d578063c3863ada14610430578063cbcbb5071461043857610241565b806399248ea711610114578063a457c2d7116100f9578063a457c2d7146103dc578063a9059cbb146103ef578063aaf5eb681461040257610241565b806399248ea7146103c15780639a99b4f0146103c957610241565b80638dbefee214610396578063919cd40f146103a9578063946776cd146103b157806395d89b41146103b957610241565b8063313ce567116101d857806370a08231116101a7578063787a08a61161018c578063787a08a6146103685780637e90d7ef146103705780638779588c1461038357610241565b806370a082311461034d57806372b49d631461036057610241565b8063313ce5671461030a5780633373ee4c1461031f578063359c4a9614610332578063395093511461033a57610241565b80631e9a6950116102145780631e9a6950146102ac57806323b872dd146102c15780632acbf823146102d4578063312f6b83146102f557610241565b806306fdde0314610246578063091030c314610264578063095ea7b31461028457806318160ddd146102a4575b600080fd5b61024e6104a3565b60405161025b9190612e97565b60405180910390f35b610277610272366004612c11565b610557565b60405161025b9190613088565b610297610292366004612ca5565b610569565b60405161025b9190612e8c565b610277610587565b6102bf6102ba366004612ca5565b61058d565b005b6102976102cf366004612c65565b6107cf565b6102e76102e2366004612ca5565b610871565b60405161025b929190613038565b6102fd6108b8565b60405161025b9190612e45565b6103126108dc565b60405161025b9190613091565b61027761032d366004612c2d565b6108e5565b610277610922565b610297610348366004612ca5565b610946565b61027761035b366004612c11565b6109a1565b6102776109c9565b6102bf6109ed565b61027761037e366004612c11565b610a66565b610277610391366004612c11565b610a78565b6102776103a4366004612c11565b610a8a565b610277610b53565b6102fd610b77565b61024e610b9b565b6102fd610c1a565b6102bf6103d7366004612ca5565b610c3e565b6102976103ea366004612ca5565b610db0565b6102976103fd366004612ca5565b610e25565b610312610e39565b6102bf610418366004612ca5565b610e3e565b6102bf61042b366004612cd0565b61100b565b6102fd61122d565b6102fd611249565b61027761044e366004612c2d565b61126d565b6102776112a5565b61046e610469366004612c11565b6112aa565b60405161025b9392919061305b565b61027761048b366004612e07565b6112ee565b6102bf61049e366004612d40565b6113f2565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b603e6020526000908152604090205481565b600061057d610576611568565b848461156c565b5060015b92915050565b60025490565b806105cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f08565b60405180910390fd5b336000908152603e6020526040902054610607817f00000000000000000000000000000000000000000000000000000000000000006114f4565b421161063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f3f565b7f000000000000000000000000000000000000000000000000000000000000000061069461068d837f00000000000000000000000000000000000000000000000000000000000000006114f4565b42906116b3565b11156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612fad565b60006106d7336109a1565b905060008184116106e857836106ea565b815b90506106f8338360016116f5565b5061070333826117b4565b61070d82826116b3565b61072257336000908152603e60205260408120555b61076373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686836118fe565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd12200efa34901b99367694174c3b0d32c99585fdf37c7c26892136ddd0836d9836040516107c09190613088565b60405180910390a35050505050565b60006107dc84848461198b565b610866846107e8611568565b610861856040518060600160405280602881526020016131736028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020526040812090610833611568565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190611a98565b61156c565b5060015b9392505050565b60066020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152603c60209081526040808320938616835260029093019052205492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061057d610953611568565b846108618560016000610964611568565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c1681529252902054906114f4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109f6336109a1565b610a2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612fe4565b336000818152603e6020526040808220429055517ff52f50426b32362d3e6bb8cb36b7074756b224622def6352a59eac7f66ebe6e89190a2565b603d6020526000908152604090205481565b60076020526000908152604090205481565b60408051600180825281830190925260009160609190816020015b610aad612af2565b815260200190600190039081610aa557905050905060405180606001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001610af2856109a1565b8152602001610aff610587565b81525081600081518110610b0f57fe5b602002602001018190525061086a610b278483611b49565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d6020526040902054906114f4565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561054d5780601f106105225761010080835404028352916020019161054d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610c5433610c4d336109a1565b60006116f5565b905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8314610c855782610c87565b815b9050610cd3816040518060400160405280600e81526020017f494e56414c49445f414d4f554e5400000000000000000000000000000000000081525084611a989092919063ffffffff16565b336000908152603d6020526040902055610d457f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000008684611c77565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051610da29190613088565b60405180910390a350505050565b600061057d610dbd611568565b846108618560405180606001604052806025815260200161325d6025913960016000610de7611568565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190611a98565b600061057d610e32611568565b848461198b565b601281565b80610e75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f08565b6000610e80836109a1565b90506000610e97843084610e92610587565b611d0c565b90508015610f2f577f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a768482604051610ed0929190612e66565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff84166000908152603d6020526040902054610f0890826114f4565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603d60205260409020555b610f3c60008486856112ee565b73ffffffffffffffffffffffffffffffffffffffff85166000908152603e6020526040902055610f6c8484611de5565b610fae73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086611c77565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd785604051610da29190613088565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461107a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c490612f76565b60005b81811015611228576000603c600085858581811061109757fe5b90506060020160400160208101906110af9190612c11565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061112e8484848181106110fa57fe5b90506060020160400160208101906111129190612c11565b8286868681811061111f57fe5b90506060020160200135611f16565b5083838381811061113b57fe5b6111519260206060909202019081019150612dd7565b81547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9190911617815583838381811061119957fe5b90506060020160400160208101906111b19190612c11565b73ffffffffffffffffffffffffffffffffffffffff167f87fa03892a0556cb6b8f97e6d533a150d4d55fcbf275fff5fa003fa636bcc7fa8585858181106111f457fe5b61120a9260206060909202019081019150612dd7565b604051611217919061301b565b60405180910390a25060010161107d565b505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600181565b603c60205260009081526040902080546001909101546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009004169083565b73ffffffffffffffffffffffffffffffffffffffff82166000908152603e6020526040812054806113235760009150506113ea565b60006113797f0000000000000000000000000000000000000000000000000000000000000000611373427f00000000000000000000000000000000000000000000000000000000000000006116b3565b906116b3565b90508181111561138c57600091506113e6565b600087821161139b578761139d565b425b9050828110156113b2578293505050506113ea565b6113e26113bf88876114f4565b6113dc6113cc8887612015565b6113d68b86612015565b906114f4565b90612088565b9250505b5090505b949350505050565b60006113fc6120ca565b90506009548111611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061319b602e913960400191505060405180910390fd5b6009819055604080516020601f880181900481028201810190925286815261149a9188908890819084018382808284376000920191909152506120cf92505050565b6114d984848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120e692505050565b6114e2826120f9565b6114eb8761212d565b50505050505050565b60008282018381101561086a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b73ffffffffffffffffffffffffffffffffffffffff83166115d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061320f6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061310a6022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600061086a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a98565b600080611706853086610e92610587565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603d60205260408120549192509061173a90836114f4565b905081156117ab5783156117715773ffffffffffffffffffffffffffffffffffffffff86166000908152603d602052604090208190555b7f2468f9268c60ad90e2d49edb0032c8a001e733ae888b3ab8e982edf535be1a7686836040516117a2929190612e66565b60405180910390a15b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611820576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131c96021913960400191505060405180910390fd5b61182c82600083612174565b611876816040518060600160405280602281526020016130e86022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190611a98565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546118a990826116b3565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526112289084906122f2565b6000611996846109a1565b90506119a4848260016116f5565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a875760006119e3846109a1565b90506119f1848260016116f5565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152603e6020526040902054611a24818587856112ee565b73ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260409020558284148015611a5857508015155b15611a845773ffffffffffffffffffffffffffffffffffffffff86166000908152603e60205260408120555b50505b611a92848484612530565b50505050565b60008184841115611b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b06578181015183820152602001611aee565b50505050905090810190601f168015611b335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080805b8351811015611c6f576000603c6000868481518110611b6957fe5b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000908120600181015481548851929450611bf4926fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416908a9088908110611be357fe5b602002602001015160400151612700565b9050611c63611c5c878581518110611c0857fe5b602002602001015160200151838560020160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612814565b85906114f4565b93505050600101611b4e565b509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611a929085906122f2565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603c602090815260408083209388168352600284019091528120549091908280611d54888588611f16565b9050808314611dd9578615611d7157611d6e878285612814565b91505b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526002870160205260409081902084905551918a16917fbb123b5c06d5408bbea3c4fef481578175cfb432e3b482c6186f02ed9086585b90611dd0908590613088565b60405180910390a35b50979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611e7360008383612174565b600254611e8090826114f4565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611eb390826114f4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600182015482546000919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1642811415611f575750905061086a565b8454600090611f7b9084906fffffffffffffffffffffffffffffffff168488612700565b9050828114611fdc578086600101819055508673ffffffffffffffffffffffffffffffffffffffff167f5777ca300dfe5bead41006fbce4389794dbc0ed8d6cccebfaf94630aa04184bc82604051611fd39190613088565b60405180910390a25b85546fffffffffffffffffffffffffffffffff428116700100000000000000000000000000000000029116178655925050509392505050565b60008261202457506000610581565b8282028284828161203157fe5b041461086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131526021913960400191505060405180910390fd5b600061086a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612836565b600190565b80516120e2906003906020840190612b29565b5050565b80516120e2906004906020840190612b29565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121ad57611228565b73ffffffffffffffffffffffffffffffffffffffff8316156121ec5760006121d4846109a1565b90506121ea84826121e581866116b3565b6128b5565b505b73ffffffffffffffffffffffffffffffffffffffff821615612226576000612213836109a1565b905061222483826121e581866114f4565b505b60085473ffffffffffffffffffffffffffffffffffffffff168015611a92578073ffffffffffffffffffffffffffffffffffffffff16634a3931498585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156122d457600080fd5b505af11580156122e8573d6000803e3d6000fd5b5050505050505050565b6123118273ffffffffffffffffffffffffffffffffffffffff16612ab9565b61237c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106123e557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123a8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612447576040519150601f19603f3d011682016040523d82523d6000602084013e61244c565b606091505b5091509150816124bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611a92578080602001905160208110156124d957600080fd5b5051611a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613233602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831661259c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806131ea6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216612608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806130c56023913960400191505060405180910390fd5b612613838383612174565b61265d8160405180606001604052806026815260200161312c6026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190611a98565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461269990826114f4565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600083158061270d575081155b80612729575042836fffffffffffffffffffffffffffffffff16145b8061276657507f0000000000000000000000000000000000000000000000000000000000000000836fffffffffffffffffffffffffffffffff1610155b156127725750836113ea565b60007f000000000000000000000000000000000000000000000000000000000000000042116127a157426127c3565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006127e3826fffffffffffffffffffffffffffffffff87166116b3565b9050612809876113d6866113dc670de0b6b3a76400006128038c88612015565b90612015565b979650505050505050565b60006113ea670de0b6b3a76400006113dc61282f86866116b3565b8790612015565b6000818361289f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315611b06578181015183820152602001611aee565b5060008385816128ab57fe5b0495945050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600760209081526040808320546006909252909120439190811580159061293957506fffffffffffffffffffffffffffffffff83168160006129148560016116b3565b81526020810191909152604001600020546fffffffffffffffffffffffffffffffff16145b15612993578381600061294d8560016116b3565b8152602081019190915260400160002080546fffffffffffffffffffffffffffffffff928316700100000000000000000000000000000000029216919091179055612a49565b6040805180820182526fffffffffffffffffffffffffffffffff80861682528681166020808401918252600087815290869052939093209151825493518216700100000000000000000000000000000000029082167fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169390931716919091179055612a228260016114f4565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600760205260409020555b6040805173ffffffffffffffffffffffffffffffffffffffff881681526fffffffffffffffffffffffffffffffff808816602083015286168183015290517f2cd3c83ddac2953ee75f53265d9ea4463eaf05030e5459a1b7e63819b7ce88f79181900360600190a1505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113ea575050151592915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612b5f5760008555612ba5565b82601f10612b7857805160ff1916838001178555612ba5565b82800160010185558215612ba5579182015b82811115612ba5578251825591602001919060010190612b8a565b50612bb1929150612bb5565b5090565b5b80821115612bb15760008155600101612bb6565b60008083601f840112612bdb578182fd5b50813567ffffffffffffffff811115612bf2578182fd5b602083019150836020828501011115612c0a57600080fd5b9250929050565b600060208284031215612c22578081fd5b813561086a8161309f565b60008060408385031215612c3f578081fd5b8235612c4a8161309f565b91506020830135612c5a8161309f565b809150509250929050565b600080600060608486031215612c79578081fd5b8335612c848161309f565b92506020840135612c948161309f565b929592945050506040919091013590565b60008060408385031215612cb7578182fd5b8235612cc28161309f565b946020939093013593505050565b60008060208385031215612ce2578182fd5b823567ffffffffffffffff80821115612cf9578384fd5b818501915085601f830112612d0c578384fd5b813581811115612d1a578485fd5b866020606083028501011115612d2e578485fd5b60209290920196919550909350505050565b60008060008060008060808789031215612d58578182fd5b8635612d638161309f565b9550602087013567ffffffffffffffff80821115612d7f578384fd5b612d8b8a838b01612bca565b90975095506040890135915080821115612da3578384fd5b50612db089828a01612bca565b909450925050606087013560ff81168114612dc9578182fd5b809150509295509295509295565b600060208284031215612de8578081fd5b81356fffffffffffffffffffffffffffffffff8116811461086a578182fd5b60008060008060808587031215612e1c578384fd5b84359350602085013592506040850135612e358161309f565b9396929550929360600135925050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6000602080835283518082850152825b81811015612ec357858101830151858201604001528201612ea7565b81811115612ed45783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526013908201527f494e56414c49445f5a45524f5f414d4f554e5400000000000000000000000000604082015260600190565b60208082526015908201527f494e53554646494349454e545f434f4f4c444f574e0000000000000000000000604082015260600190565b60208082526015908201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604082015260600190565b60208082526017908201527f554e5354414b455f57494e444f575f46494e4953484544000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f42414c414e43455f4f4e5f434f4f4c444f574e0000000000604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60ff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146130c157600080fd5b5056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122039bef5afce8f6ff90bfcc67f6bfa85b468995fc2f3183adda3faef1fab23d00f64736f6c63430007050033",
  "devdoc": {
    "author": "Aave*",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "returns the allowance of spender on the tokens owned by owner",
        "params": {
          "owner": "the owner of the tokens",
          "spender": "the user allowed to spend the owner's tokens"
        },
        "returns": {
          "_0": "the amount of owner's tokens spender is allowed to spend*"
        }
      },
      "approve(address,uint256)": {
        "details": "allows spender to spend the tokens owned by msg.sender",
        "params": {
          "spender": "the user allowed to spend msg.sender tokens"
        },
        "returns": {
          "_0": "true*"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "the balance of the token*"
        }
      },
      "claimRewards(address,uint256)": {
        "details": "Claims an `amount` of `REWARD_TOKEN` to the address `to`",
        "params": {
          "amount": "Amount to stake*",
          "to": "Address to stake for"
        }
      },
      "configureAssets((uint128,uint256,address)[])": {
        "details": "Configures the distribution of rewards for a list of assets",
        "params": {
          "assetsConfigInput": "The list of configurations to apply*"
        }
      },
      "cooldown()": {
        "details": "Activates the cooldown period to unstake - It can't be called if the user is not staking*"
      },
      "decimals()": {
        "returns": {
          "_0": "the decimals of the token*"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "decreases the allowance of spender to spend msg.sender tokens",
        "params": {
          "spender": "the user allowed to spend on behalf of msg.sender",
          "subtractedValue": "the amount being subtracted to the allowance"
        },
        "returns": {
          "_0": "true*"
        }
      },
      "getNextCooldownTimestamp(uint256,uint256,address,uint256)": {
        "details": "Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient  - Weighted average of from/to cooldown timestamps if:    # The sender doesn't have the cooldown activated (timestamp 0).    # The sender timestamp is expired    # The sender has a \"worse\" timestamp  - If the receiver's cooldown timestamp expired (too old), the next is 0",
        "params": {
          "amountToReceive": "Amount",
          "fromCooldownTimestamp": "Cooldown timestamp of the sender",
          "toAddress": "Address of the recipient",
          "toBalance": "Current balance of the receiver"
        },
        "returns": {
          "_0": "The new cooldown timestamp*"
        }
      },
      "getTotalRewardsBalance(address)": {
        "details": "Return the total rewards pending to claim by an staker",
        "params": {
          "staker": "The staker address"
        },
        "returns": {
          "_0": "The rewards"
        }
      },
      "getUserAssetData(address,address)": {
        "details": "Returns the data of an user on a distribution",
        "params": {
          "asset": "The address of the reference asset of the distribution",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The new index*"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "increases the allowance of spender to spend msg.sender tokens",
        "params": {
          "addedValue": "the amount being added to the allowance",
          "spender": "the user allowed to spend on behalf of msg.sender"
        },
        "returns": {
          "_0": "true*"
        }
      },
      "initialize(address,string,string,uint8)": {
        "details": "Called by the proxy contract*"
      },
      "name()": {
        "returns": {
          "_0": "the name of the token*"
        }
      },
      "redeem(address,uint256)": {
        "details": "Redeems staked tokens, and stop earning rewards",
        "params": {
          "amount": "Amount to redeem*",
          "to": "Address to redeem to"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "the symbol of the token*"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "the total supply of the token*"
        }
      },
      "transfer(address,uint256)": {
        "details": "executes a transfer of tokens from msg.sender to recipient",
        "params": {
          "amount": "the amount of tokens being transferred",
          "recipient": "the recipient of the tokens"
        },
        "returns": {
          "_0": "true if the transfer succeeds, false otherwise*"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "executes a transfer of token from sender to recipient, if msg.sender is allowed to do so",
        "params": {
          "amount": "the amount of tokens being transferred",
          "recipient": "the recipient of the tokens",
          "sender": "the owner of the tokens"
        },
        "returns": {
          "_0": "true if the transfer succeeds, false otherwise*"
        }
      }
    },
    "title": "StakedAave",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "REWARDS_VAULT()": {
        "notice": "Address to pull from the rewards, needs to have approved this contract"
      },
      "UNSTAKE_WINDOW()": {
        "notice": "Seconds available to redeem once the cooldown period is fullfilled"
      }
    },
    "notice": "StakedToken with AAVE token as staked token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1916,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1922,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1924,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1926,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1928,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1930,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 2445,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_snapshots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)2439_storage))"
      },
      {
        "astId": 2449,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_countsSnapshots",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2452,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "_aaveGovernance",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITransferHook)1786"
      },
      {
        "astId": 5701,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5732,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "______gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3095,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "assets",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_struct(AssetData)3084_storage)"
      },
      {
        "astId": 3751,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "stakerRewardsToClaim",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3755,
        "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
        "label": "stakersCooldowns",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_contract(ITransferHook)1786": {
        "encoding": "inplace",
        "label": "contract ITransferHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)2439_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ERC20WithSnapshot.Snapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Snapshot)2439_storage)"
      },
      "t_mapping(t_address,t_struct(AssetData)3084_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AaveDistributionManager.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)3084_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)2439_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC20WithSnapshot.Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)2439_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetData)3084_storage": {
        "encoding": "inplace",
        "label": "struct AaveDistributionManager.AssetData",
        "members": [
          {
            "astId": 3075,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "emissionPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3077,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "lastUpdateTimestamp",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3079,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3083,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "users",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Snapshot)2439_storage": {
        "encoding": "inplace",
        "label": "struct ERC20WithSnapshot.Snapshot",
        "members": [
          {
            "astId": 2436,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2438,
            "contract": "@aave/safety-module/contracts/stake/StakedAave.sol:StakedAave",
            "label": "value",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}